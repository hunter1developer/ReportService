unit ReportService_Impl;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROXMLIntf,
  uROClientIntf,
  uROClasses,
  uROTypes,
  uROServer,
  uROServerIntf,
  uROSessions,
  uRORemoteDataModule,
  uROStream,
  uROExceptions,
  VReportServiceLibrary_Intf,
  VDataServerLibrary_Intf,
  VCloudServiceLibrary_Intf, uROMessage, uROAESEncryptionEnvelope,
  uROBinMessage, uROChannelAwareComponent, uRORemoteService, uROComponent,
  uROBaseConnection, uROTransportChannel, uROBaseHTTPClient, uROIndyHTTPChannel,
  RegularExpressions, uROAsync, uROServerLocator;

type
  { Forward declarations }
  TReportService = class;

  TReportService = class(TRORemoteDataModule, IReportService)
    CloudHTTPChannel: TROIndyHTTPChannel;
    CloudBinMessage: TROBinMessage;
    CloudEncryptionEnvelope: TROAESEncryptionEnvelope;
    CloudService: TRORemoteService;
  public
    function GetVersion: UnicodeString; virtual;
    function Login(const ID: UnicodeString; const Password: UnicodeString): roReportLoginResult; virtual;
    function LoginSSO(const ID: UnicodeString): roReportLoginResult; virtual;
    function Logout(const SessionID: UnicodeString): roReportResult;
    function CheckSamlAuthentication(const UserCloudID: UnicodeString): Boolean; virtual;
    function GetSamlIdpName(const UserCloudId: UnicodeString): UnicodeString; virtual;
    function CheckCloudUserId(const UserCloudId: UnicodeString): Boolean; virtual;
    function Echo(const AValue: UnicodeString): UnicodeString;
    function CheckSessionID(const SessionID: UnicodeString): Boolean;
    function GetReportFromListData(const SessionID: UnicodeString; out ReportFromListData: Binary): roReportResult;
    function GetReport(const SessionId: UnicodeString; const RfId: UnicodeString; out ReportData: Binary): roReportResult; virtual;
    function GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult; virtual;
    function GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult; virtual;
    function SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult; virtual;
    function DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult; virtual;
    function RefreshSession(const SessionId: UnicodeString): roReportResult; virtual;


    function RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

    function RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary; virtual;
    function RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary; virtual;

  private
    fClientSession: roSessionInfo;
    function CheckCloudUser(const ID: string; out ServerInfo: roCloudServerRecord; out UserInfo: roCloudUserRecord): Boolean;
    procedure PrepareCloudAddress(AServerAddress: String; AServerPort: Integer);
    function GetVersionFromFileName(const AFileName: string): string;
  public
    property ClientSession: roSessionInfo read fClientSession;
  end;

implementation

{$IFDEF DELPHIXE2UP}
  {%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}
{$IFNDEF FPC}
  {$R *.dfm}
{$ENDIF}
{$IFDEF FPC}
  {$R *.lfm}
{$ENDIF}

uses
  uVCloudServiceHelpers,
  VReportServiceLibrary_Invk,
  uReportSessionManager,
  uServiceSettings,
  uVReportServiceHelpers,
  uVDataServerHelpers,
  uResults,
  uCommonUtils;

const
  constFileNameInstallation = 'VersatileCloudReportManager_setup.exe';

var fClassFactory_ReportService: IROClassFactory;

procedure Create_ReportService(out anInstance: IInterface);
begin
  anInstance := TReportService.Create(nil);
end;

function TReportService.CheckCloudUserId(
  const UserCloudId: UnicodeString): Boolean;
var
  res: roReportResult;
  fParams: VDataServerLibrary_Intf.roParameterList;
  serverInfo: roCloudServerRecord;
  userInfo: roCloudUserRecord;
begin
  Result := false;

  PrepareCloudAddress(Settings.CloudServiceHost, Settings.CloudServicePort);
  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  fParams['UserCloudIdHash'].Value := TCommonUtils.GetSHA1String(UserCloudID);
  try
    Result := CheckCloudUser(UserCloudID, serverInfo, userInfo);
  finally
    if Assigned(fParams) then
      FreeAndNil(fParams);
    if Assigned(serverInfo) then
      FreeAndNil(ServerInfo);
    if Assigned(userInfo) then
      FreeAndNil(userInfo);
  end;
end;

function TReportService.CheckSamlAuthentication(
  const UserCloudID: UnicodeString): Boolean;
var
  res: roReportResult;
  fParams: VDataServerLibrary_Intf.roParameterList;
  serverInfo: roCloudServerRecord;
  userInfo: roCloudUserRecord;
begin
  Result := false;

  PrepareCloudAddress(Settings.CloudServiceHost, Settings.CloudServicePort);
  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  fParams['UserCloudIdHash'].Value := TCommonUtils.GetSHA1String(UserCloudID);
  try
    if CheckCloudUser(UserCloudID, serverInfo, userInfo) then
      Result := userInfo.ParameterList.FindParam('SamlEnabled').AsBoolean;
  finally

    if Assigned(fParams) then
      FreeAndNil(fParams);
    if Assigned(serverInfo) then
      FreeAndNil(ServerInfo);
    if Assigned(userInfo) then
      FreeAndNil(userInfo);
  end;
end;

function TReportService.GetSamlIdpName(
  const UserCloudId: UnicodeString): UnicodeString;
var
  res: roReportResult;
  fParams: VDataServerLibrary_Intf.roParameterList;
  serverInfo: roCloudServerRecord;
  userInfo: roCloudUserRecord;
begin
  Result := EmptyStr;

  PrepareCloudAddress(Settings.CloudServiceHost, Settings.CloudServicePort);
  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  fParams['UserCloudIdHash'].Value := TCommonUtils.GetSHA1String(UserCloudID);
  try
    if CheckCloudUser(UserCloudID, serverInfo, userInfo) then
      Result := userInfo.ParameterList.FindParam('SamlIdpName').AsString;
  finally

    if Assigned(fParams) then
      FreeAndNil(fParams);
    if Assigned(serverInfo) then
      FreeAndNil(ServerInfo);
    if Assigned(userInfo) then
      FreeAndNil(userInfo);
  end;
end;

function TReportService.CheckSessionID(const SessionID: UnicodeString): Boolean;
begin
  Result := VReportSessionManager.FindSession(SessionID) <> nil;
end;

function TReportService.DeleteReport(const SessionId: UnicodeString;
  const ReportRecord: roReportRec): roReportResult;
var
  res: roResult;
  repSession: TReportSession;
  repRecord: roReportRecord;
begin
  Result := roReportResult.Create;
  try
    repRecord := roReportRecord.Create;
    try
      repSession := VReportSessionManager.FindSession(SessionID);
      if Assigned(repSession) then
      begin
        repRecord.RepAutoIndex := ReportRecord.RepAutoIndex;
        res := nil;
        res := (repSession.DataServer as IReportsService).ReportRemove(repSession.SessionInfo, repRecord);
        if Assigned(res) then
        try
          Result.Result := res.Result;
        finally
          FreeAndNil(res);
        end;
      end
      else
        Result.Result := RE_SESSION_NOT_ASSIGNED;
    finally
      FreeAndNil(repRecord);
    end;
  except
    on E: Exception do
    begin
      if E is EROInvalidStream then
      begin
        VReportSessionManager.CloseSessions;
        Result.Result := RE_SESSION_NOT_ASSIGNED;
      end
      else
        Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.DeleteReport');
    end;
  end;
end;

function TReportService.Echo(const AValue: UnicodeString): UnicodeString;
begin
  Result := AValue;
end;

function TReportService.GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
var
  Stream: TFileStream;
  InstallationFileName: string;
begin
  Result := roReportResult.Create;
  try
    try
      InstallationFileName := Settings.VCloudReportManagerInstallation + PathDelim + constFileNameInstallation;
      if FileExists(InstallationFileName) then
      begin
        try
          AppData := Binary.Create();
          Stream := TFileStream.Create(InstallationFileName, fmOpenRead);
          Stream.Position := 0;
          AppData.CopyFrom(Stream, Stream.Size);
          Result.Result := R_OK;
        finally
          Stream.Free;
        end;
      end
      else
      begin
        Result.Result := RE_SYSTEM_ERROR;
        Result.ResultMsg := 'Not found the Installation file for Updating.';
      end;
    finally

    end;
  except
    on E: Exception do
    begin
      if E is EROInvalidStream then
      begin
        Result.Result := RE_SYSTEM_ERROR;
      end
      else
        Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.GetNewInstallationVCloudReportManager');
    end;
  end;
end;

function TReportService.GetNewInstallationVCloudReportManagerVersion(
  out Version: UnicodeString): roReportResult;
var
  InstallationFileName: string;
begin
  Result := roReportResult.Create;
  try
    InstallationFileName := Settings.VCloudReportManagerInstallation + PathDelim + constFileNameInstallation;
    if FileExists(InstallationFileName) then
      Version := TCommonUtils.GetProductVersionStr(InstallationFileName)
    else
    begin
      Result.Result := RE_SYSTEM_ERROR;
      Result.ResultMsg := 'Not found the Installation file.';
    end;
  except
    on E: Exception do
      Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.GetNewInstallationVCloudReportManagerVersion');
    end;
end;

function TReportService.GetReport(const SessionId, RfId: UnicodeString;
  out ReportData: Binary): roReportResult;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  fBinaryDataSet: Binary;
begin
  Result := roReportResult.Create;
  try
    fBinaryDataSet := nil;
    repSession := VReportSessionManager.FindSession(SessionID);
    fParams := roParameterList.Create;
    try
      if Assigned(repSession) then
      begin
        fParams.AddParam('RfId', RfId);
        res := nil;
        res := (repSession.DataServer as IReportsService).GetReportListData(repSession.SessionInfo, fParams, fBinaryDataSet);
        if Assigned(res) then
        try
          if res.ResultCode = 0 then
            ReportData := fBinaryDataSet;

          Result.Result := res.Result;
        finally
          FreeAndNil(res);
        end;
      end
      else
        Result.Result := RE_SESSION_NOT_ASSIGNED;
    finally
      FreeAndNil(fParams);
    end;
  except
    on E: Exception do
    begin
      if E is EROInvalidStream then
      begin
        VReportSessionManager.CloseSessions;
        Result.Result := RE_SESSION_NOT_ASSIGNED;
      end
      else
        Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.GetReport');
    end;
  end;
end;

function TReportService.GetReportFromListData(const SessionID: UnicodeString;
  out ReportFromListData: Binary): roReportResult;
var
  res: roResult;
  repSession: TReportSession;
  fParams: roParameterList;
  fBinaryDataSet: Binary;
begin
  Result := roReportResult.Create;
  try
    fBinaryDataSet := nil;
    fParams := roParameterList.Create;
    try
      repSession := VReportSessionManager.FindSession(SessionID);
      if Assigned(repSession) then
      begin
        res := nil;
        res := (repSession.DataServer as IReportsService).GetReportFormListData(repSession.SessionInfo, fParams, fBinaryDataSet);
        if Assigned(res) then
        try
          if res.ResultCode = 0 then
            ReportFromListData := fBinaryDataSet;

          Result.Result := res.Result;
        finally
          FreeAndNil(res);
        end;
      end
      else
        Result.Result := RE_SESSION_NOT_ASSIGNED;
    finally
      FreeAndNil(fParams);
    end;
  except
    on E: Exception do
    begin
      if E is EROInvalidStream then
      begin
        VReportSessionManager.CloseSessions;
        Result.Result := RE_SESSION_NOT_ASSIGNED;
      end
      else
        Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.GetReportFromListData');
    end;
  end;
end;

function TReportService.GetVersion: UnicodeString;
begin
  Result := TCommonUtils.GetFileVersionStr(GetModuleName(HInstance));
end;

function TReportService.GetVersionFromFileName(const AFileName: string): string;
const
  constFileVersion = '0.0.0.0';
var
  iPos: integer;
begin
  iPos:= pos('_', AFileName);
  if (iPos > 0) then
    Result := copy(AFileName, iPos+1, 3)
  else
    Result := constFileVersion;
end;

function TReportService.Login(const ID, Password: UnicodeString): roReportLoginResult;
var
  res: roLoginResult;
  fParams: VDataServerLibrary_Intf.roParameterList;
  serverInfo: roCloudServerRecord;
  userInfo: roCloudUserRecord;
  clientSession: roSessionInfo;
  SessionID: string;
  DataServer: TRORemoteService;
  tempSessionFunctionality: roSessionFunctionalityRecord;
  resFunc: roResult;
  i: Integer;
begin
  Result := VReportServiceLibrary_Intf.roReportLoginResult.Create;

  PrepareCloudAddress(Settings.CloudServiceHost, Settings.CloudServicePort);

  clientSession := roSessionInfo.Create;
  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  fParams['IsLocalSession'].AsBoolean := True;
  res := nil;
  resFunc := nil;
  tempSessionFunctionality := nil;

  try
    if CheckCloudUser(ID, serverInfo, userInfo) then
    begin
      clientSession.SessionId := userInfo.SessionId;
      DataServer := VReportSessionManager.AddServer(serverInfo, SessionID);
      if (DataServer <> nil) then
        res := (DataServer as VDataServerLibrary_Intf.IAuthenticationService).CloudAuthentication(clientSession, ID, Password, fParams);

      if (res.ResultInfo.Result = R_OK) then
      begin
        resFunc := (DataServer as VDataServerLibrary_Intf.ISecurityService).LoadSessionFunctionality(res.SessionInfo, tempSessionFunctionality);
        if (resFunc.Result = R_OK) then
        begin
          VReportSessionManager.AddSession(res.SessionInfo, SessionID);

          Result.ResultCode := R_OK.Code;
          Result.SessionID := SessionID;

          Result.ReportSessionFunctionality.SgIndex    := tempSessionFunctionality.SgIndex;
          Result.ReportSessionFunctionality.FullAccess := tempSessionFunctionality.FullAccess;
          Result.ReportSessionFunctionality.IsAdmin    := tempSessionFunctionality.IsAdmin;
          Result.ReportSessionFunctionality.FunctionList.Clear;
          for i := 0 to tempSessionFunctionality.FunctionList.Count - 1 do
            Result.ReportSessionFunctionality.FunctionList.Add(tempSessionFunctionality.FunctionList[i]);
        end
        else
          Result.Result := resFunc.Result;
      end
      else
        Result.Result := res.ResultInfo.Result;
    end
    else
      Result.Result := RE_NOT_CLOUD_USER;
  finally
    if Assigned(resFunc) then
      FreeAndNil(resFunc);
    if Assigned(res) then
      FreeAndNil(res);
    FreeAndNil(fParams);
    FreeAndNil(clientSession);
    if Assigned(tempSessionFunctionality) then
      FreeAndNil(tempSessionFunctionality);
    if Assigned(serverInfo) then
      FreeAndNil(ServerInfo);
    if Assigned(userInfo) then
      FreeAndNil(userInfo);
  end;
end;

function TReportService.LoginSSO(const ID: UnicodeString): roReportLoginResult;
var
  res: roLoginResult;
  fParams: VDataServerLibrary_Intf.roParameterList;
  serverInfo: roCloudServerRecord;
  userInfo: roCloudUserRecord;
  clientSession: roSessionInfo;
  SessionID: string;
  DataServer: TRORemoteService;
  tempSessionFunctionality: roSessionFunctionalityRecord;
  resFunc: roResult;
  i: Integer;
begin
  Result := VReportServiceLibrary_Intf.roReportLoginResult.Create;

  PrepareCloudAddress(Settings.CloudServiceHost, Settings.CloudServicePort);

  clientSession := roSessionInfo.Create;
  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  fParams['UserCloudIdHash'].Value := TCommonUtils.GetSHA1String(ID);
  res := nil;
  resFunc := nil;
  tempSessionFunctionality := nil;

  try
    if CheckCloudUser(ID, serverInfo, userInfo) then
    begin
      clientSession.SessionId := userInfo.SessionId;
      DataServer := VReportSessionManager.AddServer(serverInfo, SessionID);
      if (DataServer <> nil) then
        res := (DataServer as VDataServerLibrary_Intf.IAuthenticationService).CloudSSOAuthentication(clientSession, ID, fParams);

      if (res.ResultInfo.Result = R_OK) then
      begin
        resFunc := (DataServer as VDataServerLibrary_Intf.ISecurityService).LoadSessionFunctionality(res.SessionInfo, tempSessionFunctionality);
        if (resFunc.Result = R_OK) then
        begin
          VReportSessionManager.AddSession(res.SessionInfo, SessionID);

          Result.ResultCode := R_OK.Code;
          Result.SessionID := SessionID;

          Result.ReportSessionFunctionality.SgIndex    := tempSessionFunctionality.SgIndex;
          Result.ReportSessionFunctionality.FullAccess := tempSessionFunctionality.FullAccess;
          Result.ReportSessionFunctionality.IsAdmin    := tempSessionFunctionality.IsAdmin;
          Result.ReportSessionFunctionality.FunctionList.Clear;
          for i := 0 to tempSessionFunctionality.FunctionList.Count - 1 do
            Result.ReportSessionFunctionality.FunctionList.Add(tempSessionFunctionality.FunctionList[i]);
        end
        else
          Result.Result := resFunc.Result;
      end
      else
        Result.Result := res.ResultInfo.Result;
    end
    else
      Result.Result := RE_NOT_CLOUD_USER;
  finally
    if Assigned(resFunc) then
      FreeAndNil(resFunc);
    if Assigned(res) then
      FreeAndNil(res);
    FreeAndNil(fParams);
    FreeAndNil(clientSession);
    if Assigned(tempSessionFunctionality) then
      FreeAndNil(tempSessionFunctionality);
    if Assigned(serverInfo) then
      FreeAndNil(ServerInfo);
    if Assigned(userInfo) then
      FreeAndNil(userInfo);
  end;
end;

function TReportService.Logout(const SessionID: UnicodeString): roReportResult;
var
  repSession: TReportSession;
  repRes: roReportResult;
  resRecord: TResultRecord;
begin
  repSession := VReportSessionManager.FindSession(SessionID);
  repRes := VReportServiceLibrary_Intf.roReportResult.Create;
  if Assigned(repSession) then
    resRecord := VReportSessionManager.CloseSession(SessionID);

  repRes.Result := resRecord;

  Result := repRes;
end;

function TReportService.SaveReport(const SessionId: UnicodeString;
  const ReportRecord: roReportRec): roReportResult;
var
  res: roResult;
  repSession: TReportSession;
  repRecord: roReportRecord;
begin
  Result := roReportResult.Create;
  try
    repRecord := roReportRecord.Create;
    try
      repSession := VReportSessionManager.FindSession(SessionID);
      if Assigned(repSession) then
      begin

        repRecord.RepAutoIndex := ReportRecord.RepAutoIndex;
        repRecord.RepRfId := ReportRecord.RepRfId;
        repRecord.RepName := ReportRecord.RepName;
        repRecord.RepDesc := ReportRecord.RepDesc;
        repRecord.RepUserIndex := ReportRecord.RepUserIndex;
        repRecord.RepTemplateData.Assign(ReportRecord.RepTemplateData);
        repRecord.RepOptionsData.Assign(ReportRecord.RepOptionsData);

        res := nil;
        res := (repSession.DataServer as IReportsService).ReportSave(repSession.SessionInfo, repRecord);
        if Assigned(res) then
        try
          Result.Result := res.Result;
        finally
          FreeAndNil(res);
        end;
      end
      else
        Result.Result := RE_SESSION_NOT_ASSIGNED;
    finally
      FreeAndNil(repRecord);
    end;
  except
    on E: Exception do
    begin
      if E is EROInvalidStream then
      begin
        VReportSessionManager.CloseSessions;
        Result.Result := RE_SESSION_NOT_ASSIGNED;
      end
      else
        Result.Result := TResultRecord.ExceptionProcessing(E, 'TReportService.SaveReport');
    end;
  end;
end;

procedure TReportService.PrepareCloudAddress(AServerAddress: String;
  AServerPort: Integer);
begin
  CloudHTTPChannel.TargetURL := Format('http://%s:%d/bin',[AServerAddress, AServerPort]);
end;


function TReportService.RDA_GetReportCompData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportCompData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetSubReportDeptData(const SessionID,
  CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Data := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CompId', CompId);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetSubReportDeptData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetSubReportUserData(const SessionID,
  CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CompId', CompId);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetSubReportUserData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RefreshSession(
  const SessionId: UnicodeString): roReportResult;
var
  repSession: TReportSession;
  res: roResult;
  resLocal: TResultRecord;
begin
  res := nil;
  Result := roReportResult.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      resLocal := VReportSessionManager.SessionValid(SessionId);
      if resLocal.Code = 0 then begin
        res := (repSession.DataServer as VDataServerLibrary_Intf.IAuthenticationService).RefreshSession(repSession.SessionInfo);
        Result.ResultCode := res.ResultCode;
        Result.ResultMsg := res.ResultMsg;
      end
      else begin
        Result.ResultCode := resLocal.Code;
        Result.ResultMsg := resLocal.Description;
      end;
    end;
  finally

    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportInterviewsData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString;
  out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportInterviewsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      res := (repSession.DataServer as IReportsDataService).GetReportInterviewUDFsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleUDFsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString;
    const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CRIndex', CRIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsAuthorizersData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsData(
  const SessionID: UnicodeString; const TopCount: Integer;
  const MasterIndexesStrList, SortOrder: UnicodeString;
  out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsRelatedItemsData(
  const SessionID, RelatedSchedIndexPar, SortOrder: UnicodeString;
  out ResultReport: roReportResult): Binary;
begin
  Result := RDA_GetReportScheduleRelatedItemsData(SessionID, RelatedSchedIndexPar, SortOrder, ResultReport);
end;

function TReportService.RDA_GetReportChangeRequestsRequestComments(
  const SessionID: UnicodeString; const CRIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CRIndex', CRIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsRequestComments(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsScheduleCitationsData(
  const SessionID: UnicodeString; const SchedIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('SchedIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsScheduleCitationsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsScheduleCountriesData(
  const SessionID: UnicodeString; const CRIndex, SchedIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CRIndex', CRIndex);
      fParams.AddParam('SchedIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsScheduleCountriesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsScheduleData(
  const SessionID: UnicodeString; const SchedIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('SchedIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsScheduleData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;

end;

function TReportService.RDA_GetReportChangeRequestsSchedulePendingData(
  const SessionID: UnicodeString; const CRIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CRIndex', CRIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsSchedulePendingData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportChangeRequestsUDFsData(
  const SessionID: UnicodeString; const SchedIndex: Integer;
  const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;
  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('RecordIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportChangeRequestsUDFsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportCitationsData(const SessionID,
  IntAutoIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('IntAutoIndex', IntAutoIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportCitationsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportDefinedFieldsData(const SessionID,
  RecordIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('RecordIndex', RecordIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportDefinedFieldsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportIntFolderData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportIntFolderData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportMessagesData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportMessagesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportResearchCitationsData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportResearchCitationsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportResearchCitationsMemosData(const SessionID,
  CitIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := VDataServerLibrary_Intf.roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CitIndex', CitIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportResearchCitationsMemosData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.ResultCode = R_OK.Code then begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportResearchCitationsBusactsData(
  const SessionID, CitIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CitIndex', CitIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportResearchCitationsBusactsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportResearchCitationsSchedulesData(
  const SessionID, CitIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CitIndex', CitIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportResearchCitationsSchedulesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      FreeAndNil(Data);
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportReviewCitationsFlagData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportReviewInterviewsFlagData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportReviewMessagesFlagData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportReviewShedulesFlagData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleSchedulesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleCitationData(const SessionID,
  SchedIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('SchedIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleCitationData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleInterviewsData(const SessionID,
  IntSchedIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('IntSchedIndex', IntSchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleInterviewsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleRelatedItemsData(const SessionID,
  RelatedSchedIndexPar, SortOrder: UnicodeString;
  out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('RelatedSchedIndexPar', RelatedSchedIndexPar);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleRelatedItemsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleDefinesFieldsData(const SessionID,
  RecordIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('RecordIndex', RecordIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleDefinesFieldsData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleCountriesData(const SessionID,
  SchedIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('SchedIndex', SchedIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleCountriesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.RDA_GetReportScheduleCitTextData(const SessionID,
  CitIndex, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;

  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      fParams.AddParam('CitIndex', CitIndex);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportScheduleCitTextData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.Result = R_OK then
      begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;


function TReportService.RDA_GetReportCitUpdatesData(const SessionID: UnicodeString;
  const TopCount: Integer; const MasterIndexesStrList, SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  repSession: TReportSession;
  fParams: roParameterList;
  res: roResult;
  Data: Binary;
begin
  res := nil;
  Result := Binary.Create;

  fParams := roParameterList.Create;
  try
    repSession := VReportSessionManager.FindSession(SessionID);
    if Assigned(repSession) then
    begin
      if TopCount > 0 then fParams.AddParam('TopCount', TopCount);
      fParams.AddParam('MasterIndexesStrList', MasterIndexesStrList);
      fParams.AddParam('BatchIndex', SortOrder);
      fParams.AddParam('SortOrder', SortOrder);
      res := (repSession.DataServer as IReportsDataService).GetReportCitUpdatesData(repSession.SessionInfo, fParams, Data);

      ResultReport := roReportResult.Create;
      ResultReport.ResultCode := res.ResultCode;
      ResultReport.ResultMsg := res.ResultMsg;
      if res.ResultCode = R_OK.Code then begin
        Data.Position := 0;
        Result.Assign(Data);
        Result.Position := 0;
      end;
    end;
  finally
    if Assigned(Data) then
      Data.Free;
    FreeAndNil(fParams);
    if Assigned(res) then
      FreeAndNil(res);
  end;
end;

function TReportService.CheckCloudUser(const ID: string; out ServerInfo: roCloudServerRecord;
  out UserInfo: roCloudUserRecord): Boolean;
var
  res: roCloudLoginResult;
  exParams: roCloudParameterList;
begin
  ServerInfo := nil;
  UserInfo := nil;
  exParams := VCloudServiceLibrary_Intf.roCloudParameterList.Create;
  try
    exParams.AddParam('RequestHost', TCommonUtils.HostIP + ', ' + TCommonUtils.HostName);
    exParams.AddParam('RequestUserAgent', 'Versatile Cloud Report Service ' + TCommonUtils.GetFileVersionStr(ParamStr(0)));
    res := (CloudService as IWebService).CheckUserCloudId(ID, exParams);
    if Assigned(res) then
    try
      ServerInfo := roCloudServerRecord.Create;
      ServerInfo.Assign(res.ServerInfo);
      UserInfo := roCloudUserRecord.Create;
      UserInfo.Assign(res.UserInfo);
      Result := res.ResultInfo.Result = R_OK;
    finally
      FreeAndnil(res);
    end;
  finally
    exParams.Free;
  end;
end;

initialization
  fClassFactory_ReportService := TROClassFactory.Create('ReportService', {$IFDEF FPC}@{$ENDIF}Create_ReportService, TReportService_Invoker);
  // RegisterForZeroConf(fClassFactory_ReportService, '_ReportService_rosdk._tcp.');
finalization
  UnRegisterClassFactory(fClassFactory_ReportService);
  fClassFactory_ReportService := nil;
end.
