unit VReportServiceLibrary_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  {$IFDEF RO_GenericArray}uROArray,{$ENDIF}
  uROEncoding,
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID: String = '{B1FD7926-900D-4411-8851-9C8975CD61D6}';
const DefaultNamespace: String = 'VReportServiceLibrary';
const TargetNamespace: String = 'VReportServiceLibrary';
const IReportService_IID: TGUID = '{00B25D10-188F-4200-B503-46A1BE890994}';
type
  { Forward declarations }
  IReportService = interface;
  IReportService_Async = interface;
  IReportService_AsyncEx = interface;
  roReportResult = class;
  roReportResultCollection = class;
  roReportLoginResult = class;
  roReportLoginResultCollection = class;
  roReportRec = class;
  roReportRecCollection = class;
  roReportSessionFunctionalityRecord = class;
  roReportSessionFunctionalityRecordCollection = class;
  {$IFDEF RO_GenericArray}
  roReportIndexList = class;
  {$ENDIF}
  {$IFNDEF RO_GenericArray}
  roReportIndexList = class;
  {$ENDIF}
  {$IFNDEF RO_GenericArray}
  roReportIndexListEnumerator = class;
  {$ENDIF}
  CoReportService = class;
  CoReportService_Async = class;
  CoReportService_AsyncEx = class;
  TReportService_Proxy = class;
  TReportService_AsyncProxy = class;
  TReportService_AsyncProxyEx = class;

  roReportResult = class(TROComplexType)
  private
    fResultCode: Integer;
    fResultMsg: UnicodeString;
    fPrimIndex: Int64;
    fSecInt: Int64;
    fSessionID: UnicodeString;
  protected
    procedure FreeInternalProperties; override;
  public
    procedure Assign(aSource: TPersistent); override;
    procedure ReadComplex(aSerializer: TObject); override;
    procedure WriteComplex(aSerializer: TObject); override;
  published
    property ResultCode: Integer read fResultCode write fResultCode;
    property ResultMsg: UnicodeString read fResultMsg write fResultMsg;
    property PrimIndex: Int64 read fPrimIndex write fPrimIndex;
    property SecInt: Int64 read fSecInt write fSecInt;
    property SessionID: UnicodeString read fSessionID write fSessionID;
  end;

  roReportResultCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): roReportResult;
    procedure SetItems(aIndex: Integer; const Value: roReportResult);
  public
    constructor Create; overload;
    function Add: roReportResult; reintroduce;
    property Items[Index: Integer]: roReportResult read GetItems write SetItems; default;
  end;

  roReportLoginResult = class(roReportResult)
  private
    fReportSessionFunctionality: roReportSessionFunctionalityRecord;
    function GetReportSessionFunctionality: roReportSessionFunctionalityRecord;
  protected
    property int_ReportSessionFunctionality: roReportSessionFunctionalityRecord read fReportSessionFunctionality;
    procedure FreeInternalProperties; override;
  public
    procedure Assign(aSource: TPersistent); override;
    procedure ReadComplex(aSerializer: TObject); override;
    procedure WriteComplex(aSerializer: TObject); override;
  published
    property ReportSessionFunctionality: roReportSessionFunctionalityRecord read GetReportSessionFunctionality write fReportSessionFunctionality;
  end;

  roReportLoginResultCollection = class(roReportResultCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): roReportLoginResult;
    procedure SetItems(aIndex: Integer; const Value: roReportLoginResult);
  public
    constructor Create; overload;
    function Add: roReportLoginResult; reintroduce;
    property Items[Index: Integer]: roReportLoginResult read GetItems write SetItems; default;
  end;

  roReportRec = class(TROComplexType)
  private
    fRepAutoIndex: Integer;
    fRepRfId: UnicodeString;
    fRepName: UnicodeString;
    fRepDesc: UnicodeString;
    fRepTemplateData: Binary;
    fRepOptionsData: Binary;
    fRepUserIndex: Integer;
    function GetRepTemplateData: Binary;
    function GetRepOptionsData: Binary;
  protected
    property int_RepTemplateData: Binary read fRepTemplateData;
    property int_RepOptionsData: Binary read fRepOptionsData;
    procedure FreeInternalProperties; override;
  public
    procedure Assign(aSource: TPersistent); override;
    procedure ReadComplex(aSerializer: TObject); override;
    procedure WriteComplex(aSerializer: TObject); override;
  published
    property RepAutoIndex: Integer read fRepAutoIndex write fRepAutoIndex;
    property RepRfId: UnicodeString read fRepRfId write fRepRfId;
    property RepName: UnicodeString read fRepName write fRepName;
    property RepDesc: UnicodeString read fRepDesc write fRepDesc;
    property RepTemplateData: Binary read GetRepTemplateData write fRepTemplateData;
    property RepOptionsData: Binary read GetRepOptionsData write fRepOptionsData;
    property RepUserIndex: Integer read fRepUserIndex write fRepUserIndex;
  end;

  roReportRecCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): roReportRec;
    procedure SetItems(aIndex: Integer; const Value: roReportRec);
  public
    constructor Create; overload;
    function Add: roReportRec; reintroduce;
    property Items[Index: Integer]: roReportRec read GetItems write SetItems; default;
  end;

  roReportSessionFunctionalityRecord = class(TROComplexType)
  private
    fSgIndex: Integer;
    fFullAccess: Boolean;
    fIsAdmin: Boolean;
    fFunctionList: roReportIndexList;
    function GetFunctionList: roReportIndexList;
  protected
    property int_FunctionList: roReportIndexList read fFunctionList;
    procedure FreeInternalProperties; override;
  public
    procedure Assign(aSource: TPersistent); override;
    procedure ReadComplex(aSerializer: TObject); override;
    procedure WriteComplex(aSerializer: TObject); override;
  published
    property SgIndex: Integer read fSgIndex write fSgIndex;
    property FullAccess: Boolean read fFullAccess write fFullAccess;
    property IsAdmin: Boolean read fIsAdmin write fIsAdmin;
    property FunctionList: roReportIndexList read GetFunctionList write fFunctionList;
  end;

  roReportSessionFunctionalityRecordCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): roReportSessionFunctionalityRecord;
    procedure SetItems(aIndex: Integer; const Value: roReportSessionFunctionalityRecord);
  public
    constructor Create; overload;
    function Add: roReportSessionFunctionalityRecord; reintroduce;
    property Items[Index: Integer]: roReportSessionFunctionalityRecord read GetItems write SetItems; default;
  end;

  {$IFDEF RO_GenericArray}
  roReportIndexList = class(TROArray<Integer>)
  end;
  {$ENDIF}

  {$IFNDEF RO_GenericArray}
  roReportIndexList_Integer = array of Integer;
  {$ENDIF}

  {$IFNDEF RO_GenericArray}
  roReportIndexList = class(TROArray)
  private
    {$IFNDEF RO_GenericArray}
    fCount: Integer;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    fItems: roReportIndexList_Integer;
    {$ENDIF}
  protected
    {$IFNDEF RO_GenericArray}
    procedure Grow; virtual;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetItems(aIndex: Integer): Integer;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure SetItems(aIndex: Integer; Value: Integer);
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetCount: Integer; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure IntResize(anElementCount: Integer; AllocItems: Boolean); override;
    {$ENDIF}
  public
    {$IFNDEF RO_GenericArray}
    class function GetItemType: PTypeInfo; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    class function GetItemSize: Integer; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetItemRef(aIndex: Integer): Pointer; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure Clear; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure Delete(aIndex: Integer); override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure Assign(aSource: TPersistent); override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure ReadComplex(aSerializer: TObject); override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    procedure WriteComplex(aSerializer: TObject); override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function Add(Value: Integer): Integer;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetIndex(const aValue: Integer; const aStartFrom: Integer = 0): Integer; overload;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetIndex(const aPropertyName: String; const aPropertyValue: Variant; aStartFrom: Integer = 0; Options: TROSearchOptions = [soIgnoreCase]): Integer; override;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function IndexOf(const aValue: Integer; const aStartFrom: Integer = 0): Integer;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetEnumerator: roReportIndexListEnumerator;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    property Count: Integer read GetCount;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    property Items[Index: Integer]: Integer read GetItems write SetItems; default;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    property InnerArray: roReportIndexList_Integer read fItems;
    {$ENDIF}
  end;
  {$ENDIF}

  {$IFNDEF RO_GenericArray}
  roReportIndexListEnumerator = class(TObject)
  private
    {$IFNDEF RO_GenericArray}
    fArray: roReportIndexList;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    fCurrentIndex: Integer;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function GetCurrent: Integer;
    {$ENDIF}
  public
    {$IFNDEF RO_GenericArray}
    constructor Create(anArray: roReportIndexList);
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    function MoveNext: Boolean;
    {$ENDIF}
    {$IFNDEF RO_GenericArray}
    property Current: Integer read GetCurrent;
    {$ENDIF}
  end;
  {$ENDIF}

  IReportService = interface(IROService)
  ['{00B25D10-188F-4200-B503-46A1BE890994}']
    function GetVersion: UnicodeString;
    function Login(const ID: UnicodeString; const Password: UnicodeString): roReportLoginResult;
    function LoginSSO(const ID: UnicodeString): roReportLoginResult;
    function Logout(const SessionID: UnicodeString): roReportResult;
    function CheckSamlAuthentication(const UserCloudID: UnicodeString): Boolean;
    function GetSamlIdpName(const UserCloudId: UnicodeString): UnicodeString;
    function CheckCloudUserId(const UserCloudId: UnicodeString): Boolean;
    function Echo(const AValue: UnicodeString): UnicodeString;
    function CheckSessionID(const SessionID: UnicodeString): Boolean;
    function GetReportFromListData(const SessionID: UnicodeString; out ReportFromListData: Binary): roReportResult;
    function GetReport(const SessionId: UnicodeString; const RfId: UnicodeString; out ReportData: Binary): roReportResult;
    function GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
    function GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
    function SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
    function DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
    function RefreshSession(const SessionId: UnicodeString): roReportResult;
    function RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
  end;

  IReportService_Async = interface(IROAsyncInterface)
    procedure Invoke_GetVersion;
    procedure Invoke_Login(const ID: UnicodeString; const Password: UnicodeString);
    procedure Invoke_LoginSSO(const ID: UnicodeString);
    procedure Invoke_Logout(const SessionID: UnicodeString);
    procedure Invoke_CheckSamlAuthentication(const UserCloudID: UnicodeString);
    procedure Invoke_GetSamlIdpName(const UserCloudId: UnicodeString);
    procedure Invoke_CheckCloudUserId(const UserCloudId: UnicodeString);
    procedure Invoke_Echo(const AValue: UnicodeString);
    procedure Invoke_CheckSessionID(const SessionID: UnicodeString);
    procedure Invoke_GetReportFromListData(const SessionID: UnicodeString);
    procedure Invoke_GetReport(const SessionId: UnicodeString; const RfId: UnicodeString);
    procedure Invoke_GetNewInstallationVCloudReportManager;
    procedure Invoke_GetNewInstallationVCloudReportManagerVersion;
    procedure Invoke_SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
    procedure Invoke_DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
    procedure Invoke_RefreshSession(const SessionId: UnicodeString);
    procedure Invoke_RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString);
    function Retrieve_GetVersion: UnicodeString;
    function Retrieve_Login: roReportLoginResult;
    function Retrieve_LoginSSO: roReportLoginResult;
    function Retrieve_Logout: roReportResult;
    function Retrieve_CheckSamlAuthentication: Boolean;
    function Retrieve_GetSamlIdpName: UnicodeString;
    function Retrieve_CheckCloudUserId: Boolean;
    function Retrieve_Echo: UnicodeString;
    function Retrieve_CheckSessionID: Boolean;
    function Retrieve_GetReportFromListData(out ReportFromListData: Binary): roReportResult;
    function Retrieve_GetReport(out ReportData: Binary): roReportResult;
    function Retrieve_GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
    function Retrieve_GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
    function Retrieve_SaveReport: roReportResult;
    function Retrieve_DeleteReport: roReportResult;
    function Retrieve_RefreshSession: roReportResult;
    function Retrieve_RDA_GetReportCompData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetSubReportDeptData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetSubReportUserData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportIntFolderData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportMessagesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportCitUpdatesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportInterviewsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportDefinedFieldsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCitationData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCountriesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCitTextData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportInterviewUDFsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleUDFsData(out ResultReport: roReportResult): Binary;
  end;

  IReportService_AsyncEx = interface(IROAsyncInterfaceEx)
    function BeginGetVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogin(const ID: UnicodeString; const Password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoginSSO(const ID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogout(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckSamlAuthentication(const UserCloudID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetSamlIdpName(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckCloudUserId(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginEcho(const AValue: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckSessionID(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetReportFromListData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetReport(const SessionId: UnicodeString; const RfId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetNewInstallationVCloudReportManager(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetNewInstallationVCloudReportManagerVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginSaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRefreshSession(const SessionId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                        const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                             const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                            const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                       const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                        const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                      const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                      const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                  const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                   const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetVersion(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLogin(const aRequest: IROAsyncRequest): roReportLoginResult;
    function EndLoginSSO(const aRequest: IROAsyncRequest): roReportLoginResult;
    function EndLogout(const aRequest: IROAsyncRequest): roReportResult;
    function EndCheckSamlAuthentication(const aRequest: IROAsyncRequest): Boolean;
    function EndGetSamlIdpName(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCheckCloudUserId(const aRequest: IROAsyncRequest): Boolean;
    function EndEcho(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCheckSessionID(const aRequest: IROAsyncRequest): Boolean;
    function EndGetReportFromListData(out ReportFromListData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetReport(out ReportData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetNewInstallationVCloudReportManager(out AppData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString; const aRequest: IROAsyncRequest): roReportResult;
    function EndSaveReport(const aRequest: IROAsyncRequest): roReportResult;
    function EndDeleteReport(const aRequest: IROAsyncRequest): roReportResult;
    function EndRefreshSession(const aRequest: IROAsyncRequest): roReportResult;
    function EndRDA_GetReportCompData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetSubReportDeptData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetSubReportUserData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportIntFolderData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportMessagesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportCitUpdatesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportDefinedFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCitationData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCitTextData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportInterviewUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
  end;

  CoReportService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService; overload;
  end;

  CoReportService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService_Async; overload;
  end;

  CoReportService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService_AsyncEx; overload;
  end;

  TReportService_Proxy = class(TROProxy, IReportService)
  protected
    function __GetInterfaceName: String; override;
    function GetVersion: UnicodeString;
    function Login(const ID: UnicodeString; const Password: UnicodeString): roReportLoginResult;
    function LoginSSO(const ID: UnicodeString): roReportLoginResult;
    function Logout(const SessionID: UnicodeString): roReportResult;
    function CheckSamlAuthentication(const UserCloudID: UnicodeString): Boolean;
    function GetSamlIdpName(const UserCloudId: UnicodeString): UnicodeString;
    function CheckCloudUserId(const UserCloudId: UnicodeString): Boolean;
    function Echo(const AValue: UnicodeString): UnicodeString;
    function CheckSessionID(const SessionID: UnicodeString): Boolean;
    function GetReportFromListData(const SessionID: UnicodeString; out ReportFromListData: Binary): roReportResult;
    function GetReport(const SessionId: UnicodeString; const RfId: UnicodeString; out ReportData: Binary): roReportResult;
    function GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
    function GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
    function SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
    function DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
    function RefreshSession(const SessionId: UnicodeString): roReportResult;
    function RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
    function RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
  end;

  TReportService_AsyncProxy = class(TROAsyncProxy, IReportService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke_GetVersion;
    procedure Invoke_Login(const ID: UnicodeString; const Password: UnicodeString);
    procedure Invoke_LoginSSO(const ID: UnicodeString);
    procedure Invoke_Logout(const SessionID: UnicodeString);
    procedure Invoke_CheckSamlAuthentication(const UserCloudID: UnicodeString);
    procedure Invoke_GetSamlIdpName(const UserCloudId: UnicodeString);
    procedure Invoke_CheckCloudUserId(const UserCloudId: UnicodeString);
    procedure Invoke_Echo(const AValue: UnicodeString);
    procedure Invoke_CheckSessionID(const SessionID: UnicodeString);
    procedure Invoke_GetReportFromListData(const SessionID: UnicodeString);
    procedure Invoke_GetReport(const SessionId: UnicodeString; const RfId: UnicodeString);
    procedure Invoke_GetNewInstallationVCloudReportManager;
    procedure Invoke_GetNewInstallationVCloudReportManagerVersion;
    procedure Invoke_SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
    procedure Invoke_DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
    procedure Invoke_RefreshSession(const SessionId: UnicodeString);
    procedure Invoke_RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
    procedure Invoke_RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString);
    procedure Invoke_RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString);
    function Retrieve_GetVersion: UnicodeString;
    function Retrieve_Login: roReportLoginResult;
    function Retrieve_LoginSSO: roReportLoginResult;
    function Retrieve_Logout: roReportResult;
    function Retrieve_CheckSamlAuthentication: Boolean;
    function Retrieve_GetSamlIdpName: UnicodeString;
    function Retrieve_CheckCloudUserId: Boolean;
    function Retrieve_Echo: UnicodeString;
    function Retrieve_CheckSessionID: Boolean;
    function Retrieve_GetReportFromListData(out ReportFromListData: Binary): roReportResult;
    function Retrieve_GetReport(out ReportData: Binary): roReportResult;
    function Retrieve_GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
    function Retrieve_GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
    function Retrieve_SaveReport: roReportResult;
    function Retrieve_DeleteReport: roReportResult;
    function Retrieve_RefreshSession: roReportResult;
    function Retrieve_RDA_GetReportCompData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetSubReportDeptData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetSubReportUserData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportIntFolderData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportMessagesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportCitUpdatesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportInterviewsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportDefinedFieldsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCitationData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCountriesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleCitTextData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportInterviewUDFsData(out ResultReport: roReportResult): Binary;
    function Retrieve_RDA_GetReportScheduleUDFsData(out ResultReport: roReportResult): Binary;
  end;

  TReportService_AsyncProxyEx = class(TROAsyncProxyEx, IReportService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function BeginGetVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogin(const ID: UnicodeString; const Password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoginSSO(const ID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogout(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckSamlAuthentication(const UserCloudID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetSamlIdpName(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckCloudUserId(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginEcho(const AValue: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCheckSessionID(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetReportFromListData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetReport(const SessionId: UnicodeString; const RfId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetNewInstallationVCloudReportManager(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetNewInstallationVCloudReportManagerVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginSaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRefreshSession(const SessionId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                        const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                             const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                            const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                       const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                        const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                      const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                      const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                  const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                   const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                              const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetVersion(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLogin(const aRequest: IROAsyncRequest): roReportLoginResult;
    function EndLoginSSO(const aRequest: IROAsyncRequest): roReportLoginResult;
    function EndLogout(const aRequest: IROAsyncRequest): roReportResult;
    function EndCheckSamlAuthentication(const aRequest: IROAsyncRequest): Boolean;
    function EndGetSamlIdpName(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCheckCloudUserId(const aRequest: IROAsyncRequest): Boolean;
    function EndEcho(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCheckSessionID(const aRequest: IROAsyncRequest): Boolean;
    function EndGetReportFromListData(out ReportFromListData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetReport(out ReportData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetNewInstallationVCloudReportManager(out AppData: Binary; const aRequest: IROAsyncRequest): roReportResult;
    function EndGetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString; const aRequest: IROAsyncRequest): roReportResult;
    function EndSaveReport(const aRequest: IROAsyncRequest): roReportResult;
    function EndDeleteReport(const aRequest: IROAsyncRequest): roReportResult;
    function EndRefreshSession(const aRequest: IROAsyncRequest): roReportResult;
    function EndRDA_GetReportCompData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetSubReportDeptData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetSubReportUserData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportIntFolderData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportMessagesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportCitUpdatesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportDefinedFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCitationData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleCitTextData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportInterviewUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
    function EndRDA_GetReportScheduleUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
  end;

function DefaultNamespaces: String;
implementation

uses
  uROSystem,
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

function DefaultNamespaces: String;
var
  lres: String;
begin
  lres := DefaultNamespace;
  result := lres;
  exit;
end;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

procedure roReportResult.FreeInternalProperties;
begin
end;

procedure roReportResult.Assign(aSource: TPersistent);
var
  lSource: roReportResult;
begin
  inherited Assign(aSource);
  if aSource.InheritsFrom(roReportResult) then begin
    lSource := roReportResult(aSource);

    Self.ResultCode := lSource.ResultCode;
    Self.ResultMsg := lSource.ResultMsg;
    Self.PrimIndex := lSource.PrimIndex;
    Self.SecInt := lSource.SecInt;
    Self.SessionID := lSource.SessionID;
  end;
end;

procedure roReportResult.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_PrimIndex: Int64;
  l_ResultCode: Integer;
  l_ResultMsg: UnicodeString;
  l_SecInt: Int64;
  l_SessionID: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    l_ResultCode := Self.ResultCode;
    try
      __Serializer.ReadInteger('ResultCode', otSLong, l_ResultCode);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultCode']);
      end;
    end;
    Self.ResultCode := l_ResultCode;
    l_ResultMsg := Self.ResultMsg;
    try
      __Serializer.ReadUnicodeString('ResultMsg', l_ResultMsg);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultMsg']);
      end;
    end;
    Self.ResultMsg := l_ResultMsg;
    l_PrimIndex := Self.PrimIndex;
    try
      __Serializer.ReadInt64('PrimIndex', l_PrimIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'PrimIndex']);
      end;
    end;
    Self.PrimIndex := l_PrimIndex;
    l_SecInt := Self.SecInt;
    try
      __Serializer.ReadInt64('SecInt', l_SecInt);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SecInt']);
      end;
    end;
    Self.SecInt := l_SecInt;
    l_SessionID := Self.SessionID;
    try
      __Serializer.ReadUnicodeString('SessionID', l_SessionID);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SessionID']);
      end;
    end;
    Self.SessionID := l_SessionID;
  end
  else begin
    l_PrimIndex := Self.PrimIndex;
    try
      __Serializer.ReadInt64('PrimIndex', l_PrimIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'PrimIndex']);
      end;
    end;
    Self.PrimIndex := l_PrimIndex;
    l_ResultCode := Self.ResultCode;
    try
      __Serializer.ReadInteger('ResultCode', otSLong, l_ResultCode);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultCode']);
      end;
    end;
    Self.ResultCode := l_ResultCode;
    l_ResultMsg := Self.ResultMsg;
    try
      __Serializer.ReadUnicodeString('ResultMsg', l_ResultMsg);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultMsg']);
      end;
    end;
    Self.ResultMsg := l_ResultMsg;
    l_SecInt := Self.SecInt;
    try
      __Serializer.ReadInt64('SecInt', l_SecInt);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SecInt']);
      end;
    end;
    Self.SecInt := l_SecInt;
    l_SessionID := Self.SessionID;
    try
      __Serializer.ReadUnicodeString('SessionID', l_SessionID);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SessionID']);
      end;
    end;
    Self.SessionID := l_SessionID;
  end;
end;

procedure roReportResult.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_PrimIndex: Int64;
  l_ResultCode: Integer;
  l_ResultMsg: UnicodeString;
  l_SecInt: Int64;
  l_SessionID: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    __Serializer.ChangeClass(roReportResult);
    l_ResultCode := Self.ResultCode;
    __Serializer.WriteInteger('ResultCode', otSLong, l_ResultCode);
    l_ResultMsg := Self.ResultMsg;
    __Serializer.WriteUnicodeString('ResultMsg', l_ResultMsg);
    l_PrimIndex := Self.PrimIndex;
    __Serializer.WriteInt64('PrimIndex', l_PrimIndex);
    l_SecInt := Self.SecInt;
    __Serializer.WriteInt64('SecInt', l_SecInt);
    l_SessionID := Self.SessionID;
    __Serializer.WriteUnicodeString('SessionID', l_SessionID);
  end
  else begin
    l_PrimIndex := Self.PrimIndex;
    __Serializer.WriteInt64('PrimIndex', l_PrimIndex);
    l_ResultCode := Self.ResultCode;
    __Serializer.WriteInteger('ResultCode', otSLong, l_ResultCode);
    l_ResultMsg := Self.ResultMsg;
    __Serializer.WriteUnicodeString('ResultMsg', l_ResultMsg);
    l_SecInt := Self.SecInt;
    __Serializer.WriteInt64('SecInt', l_SecInt);
    l_SessionID := Self.SessionID;
    __Serializer.WriteUnicodeString('SessionID', l_SessionID);
  end;
end;

constructor roReportResultCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function roReportResultCollection.GetItems(aIndex: Integer): roReportResult;
begin
  result := roReportResult(inherited Items[aIndex]);
  exit;
end;

procedure roReportResultCollection.SetItems(aIndex: Integer; const Value: roReportResult);
var
  lvalue: roReportResult;
begin
  lvalue := roReportResult(inherited Items[aIndex]);
  lvalue.Assign(Value);
end;

constructor roReportResultCollection.Create;
begin
  inherited Create(roReportResult);
end;

function roReportResultCollection.Add: roReportResult;
begin
  result := roReportResult(inherited Add());
  exit;
end;

function roReportLoginResult.GetReportSessionFunctionality: roReportSessionFunctionalityRecord;
begin
  if not assigned(fReportSessionFunctionality) then begin
    fReportSessionFunctionality := roReportSessionFunctionalityRecord.Create();
  end;
  result := fReportSessionFunctionality;
  exit;
end;

procedure roReportLoginResult.FreeInternalProperties;
begin
  inherited FreeInternalProperties();
  FreeOrDisposeOf(fReportSessionFunctionality);
end;

procedure roReportLoginResult.Assign(aSource: TPersistent);
var
  lSource: roReportLoginResult;
begin
  inherited Assign(aSource);
  if aSource.InheritsFrom(roReportLoginResult) then begin
    lSource := roReportLoginResult(aSource);

    if assigned(lSource.fReportSessionFunctionality) then begin
      if assigned(Self.fReportSessionFunctionality) then begin
        Self.ReportSessionFunctionality.Assign(lSource.fReportSessionFunctionality);
      end
      else begin
        Self.fReportSessionFunctionality := roReportSessionFunctionalityRecord(lSource.fReportSessionFunctionality.Clone());
      end;
    end
    else begin
      FreeOrDisposeOf(Self.fReportSessionFunctionality);
      Self.fReportSessionFunctionality := nil;
    end;
  end;
end;

procedure roReportLoginResult.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_PrimIndex: Int64;
  l_ReportSessionFunctionality: roReportSessionFunctionalityRecord;
  l_ResultCode: Integer;
  l_ResultMsg: UnicodeString;
  l_SecInt: Int64;
  l_SessionID: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    inherited ReadComplex(aSerializer);
    l_ReportSessionFunctionality := Self.int_ReportSessionFunctionality;
    try
      __Serializer.ReadStruct('ReportSessionFunctionality', roReportSessionFunctionalityRecord, l_ReportSessionFunctionality);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ReportSessionFunctionality']);
      end;
    end;
    if Self.int_ReportSessionFunctionality <> l_ReportSessionFunctionality then begin
      FreeOrDisposeOf(Self.int_ReportSessionFunctionality);
    end;
    Self.ReportSessionFunctionality := l_ReportSessionFunctionality;
  end
  else begin
    l_PrimIndex := Self.PrimIndex;
    try
      __Serializer.ReadInt64('PrimIndex', l_PrimIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'PrimIndex']);
      end;
    end;
    Self.PrimIndex := l_PrimIndex;
    l_ReportSessionFunctionality := Self.int_ReportSessionFunctionality;
    try
      __Serializer.ReadStruct('ReportSessionFunctionality', roReportSessionFunctionalityRecord, l_ReportSessionFunctionality);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ReportSessionFunctionality']);
      end;
    end;
    if Self.int_ReportSessionFunctionality <> l_ReportSessionFunctionality then begin
      FreeOrDisposeOf(Self.int_ReportSessionFunctionality);
    end;
    Self.ReportSessionFunctionality := l_ReportSessionFunctionality;
    l_ResultCode := Self.ResultCode;
    try
      __Serializer.ReadInteger('ResultCode', otSLong, l_ResultCode);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultCode']);
      end;
    end;
    Self.ResultCode := l_ResultCode;
    l_ResultMsg := Self.ResultMsg;
    try
      __Serializer.ReadUnicodeString('ResultMsg', l_ResultMsg);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'ResultMsg']);
      end;
    end;
    Self.ResultMsg := l_ResultMsg;
    l_SecInt := Self.SecInt;
    try
      __Serializer.ReadInt64('SecInt', l_SecInt);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SecInt']);
      end;
    end;
    Self.SecInt := l_SecInt;
    l_SessionID := Self.SessionID;
    try
      __Serializer.ReadUnicodeString('SessionID', l_SessionID);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SessionID']);
      end;
    end;
    Self.SessionID := l_SessionID;
  end;
end;

procedure roReportLoginResult.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_PrimIndex: Int64;
  l_ReportSessionFunctionality: roReportSessionFunctionalityRecord;
  l_ResultCode: Integer;
  l_ResultMsg: UnicodeString;
  l_SecInt: Int64;
  l_SessionID: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    inherited WriteComplex(aSerializer);
    __Serializer.ChangeClass(roReportLoginResult);
    l_ReportSessionFunctionality := Self.int_ReportSessionFunctionality;
    __Serializer.WriteStruct('ReportSessionFunctionality', l_ReportSessionFunctionality, roReportSessionFunctionalityRecord);
  end
  else begin
    l_PrimIndex := Self.PrimIndex;
    __Serializer.WriteInt64('PrimIndex', l_PrimIndex);
    l_ReportSessionFunctionality := Self.int_ReportSessionFunctionality;
    __Serializer.WriteStruct('ReportSessionFunctionality', l_ReportSessionFunctionality, roReportSessionFunctionalityRecord);
    l_ResultCode := Self.ResultCode;
    __Serializer.WriteInteger('ResultCode', otSLong, l_ResultCode);
    l_ResultMsg := Self.ResultMsg;
    __Serializer.WriteUnicodeString('ResultMsg', l_ResultMsg);
    l_SecInt := Self.SecInt;
    __Serializer.WriteInt64('SecInt', l_SecInt);
    l_SessionID := Self.SessionID;
    __Serializer.WriteUnicodeString('SessionID', l_SessionID);
  end;
end;

constructor roReportLoginResultCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function roReportLoginResultCollection.GetItems(aIndex: Integer): roReportLoginResult;
begin
  result := roReportLoginResult(inherited Items[aIndex]);
  exit;
end;

procedure roReportLoginResultCollection.SetItems(aIndex: Integer; const Value: roReportLoginResult);
var
  lvalue: roReportLoginResult;
begin
  lvalue := roReportLoginResult(inherited Items[aIndex]);
  lvalue.Assign(Value);
end;

constructor roReportLoginResultCollection.Create;
begin
  inherited Create(roReportLoginResult);
end;

function roReportLoginResultCollection.Add: roReportLoginResult;
begin
  result := roReportLoginResult(inherited Add());
  exit;
end;

function roReportRec.GetRepTemplateData: Binary;
begin
  if not assigned(fRepTemplateData) then begin
    fRepTemplateData := Binary.Create();
  end;
  result := fRepTemplateData;
  exit;
end;

function roReportRec.GetRepOptionsData: Binary;
begin
  if not assigned(fRepOptionsData) then begin
    fRepOptionsData := Binary.Create();
  end;
  result := fRepOptionsData;
  exit;
end;

procedure roReportRec.FreeInternalProperties;
begin
  FreeOrDisposeOf(fRepTemplateData);
  FreeOrDisposeOf(fRepOptionsData);
end;

procedure roReportRec.Assign(aSource: TPersistent);
var
  lSource: roReportRec;
begin
  inherited Assign(aSource);
  if aSource.InheritsFrom(roReportRec) then begin
    lSource := roReportRec(aSource);

    Self.RepAutoIndex := lSource.RepAutoIndex;
    Self.RepRfId := lSource.RepRfId;
    Self.RepName := lSource.RepName;
    Self.RepDesc := lSource.RepDesc;
    if assigned(lSource.fRepTemplateData) then begin
      if assigned(Self.fRepTemplateData) then begin
        Self.RepTemplateData.Assign(lSource.fRepTemplateData);
      end
      else begin
        Self.fRepTemplateData := Binary(lSource.fRepTemplateData.Clone());
      end;
    end
    else begin
      FreeOrDisposeOf(Self.fRepTemplateData);
      Self.fRepTemplateData := nil;
    end;
    if assigned(lSource.fRepOptionsData) then begin
      if assigned(Self.fRepOptionsData) then begin
        Self.RepOptionsData.Assign(lSource.fRepOptionsData);
      end
      else begin
        Self.fRepOptionsData := Binary(lSource.fRepOptionsData.Clone());
      end;
    end
    else begin
      FreeOrDisposeOf(Self.fRepOptionsData);
      Self.fRepOptionsData := nil;
    end;
    Self.RepUserIndex := lSource.RepUserIndex;
  end;
end;

procedure roReportRec.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_RepAutoIndex: Integer;
  l_RepDesc: UnicodeString;
  l_RepName: UnicodeString;
  l_RepOptionsData: Binary;
  l_RepRfId: UnicodeString;
  l_RepTemplateData: Binary;
  l_RepUserIndex: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    l_RepAutoIndex := Self.RepAutoIndex;
    try
      __Serializer.ReadInteger('RepAutoIndex', otSLong, l_RepAutoIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepAutoIndex']);
      end;
    end;
    Self.RepAutoIndex := l_RepAutoIndex;
    l_RepRfId := Self.RepRfId;
    try
      __Serializer.ReadUnicodeString('RepRfId', l_RepRfId);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepRfId']);
      end;
    end;
    Self.RepRfId := l_RepRfId;
    l_RepName := Self.RepName;
    try
      __Serializer.ReadUnicodeString('RepName', l_RepName);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepName']);
      end;
    end;
    Self.RepName := l_RepName;
    l_RepDesc := Self.RepDesc;
    try
      __Serializer.ReadUnicodeString('RepDesc', l_RepDesc);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepDesc']);
      end;
    end;
    Self.RepDesc := l_RepDesc;
    l_RepTemplateData := Self.int_RepTemplateData;
    try
      __Serializer.ReadBinary('RepTemplateData', l_RepTemplateData);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepTemplateData']);
      end;
    end;
    if Self.int_RepTemplateData <> l_RepTemplateData then begin
      FreeOrDisposeOf(Self.int_RepTemplateData);
    end;
    Self.RepTemplateData := l_RepTemplateData;
    l_RepOptionsData := Self.int_RepOptionsData;
    try
      __Serializer.ReadBinary('RepOptionsData', l_RepOptionsData);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepOptionsData']);
      end;
    end;
    if Self.int_RepOptionsData <> l_RepOptionsData then begin
      FreeOrDisposeOf(Self.int_RepOptionsData);
    end;
    Self.RepOptionsData := l_RepOptionsData;
    l_RepUserIndex := Self.RepUserIndex;
    try
      __Serializer.ReadInteger('RepUserIndex', otSLong, l_RepUserIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepUserIndex']);
      end;
    end;
    Self.RepUserIndex := l_RepUserIndex;
  end
  else begin
    l_RepAutoIndex := Self.RepAutoIndex;
    try
      __Serializer.ReadInteger('RepAutoIndex', otSLong, l_RepAutoIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepAutoIndex']);
      end;
    end;
    Self.RepAutoIndex := l_RepAutoIndex;
    l_RepDesc := Self.RepDesc;
    try
      __Serializer.ReadUnicodeString('RepDesc', l_RepDesc);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepDesc']);
      end;
    end;
    Self.RepDesc := l_RepDesc;
    l_RepName := Self.RepName;
    try
      __Serializer.ReadUnicodeString('RepName', l_RepName);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepName']);
      end;
    end;
    Self.RepName := l_RepName;
    l_RepOptionsData := Self.int_RepOptionsData;
    try
      __Serializer.ReadBinary('RepOptionsData', l_RepOptionsData);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepOptionsData']);
      end;
    end;
    if Self.int_RepOptionsData <> l_RepOptionsData then begin
      FreeOrDisposeOf(Self.int_RepOptionsData);
    end;
    Self.RepOptionsData := l_RepOptionsData;
    l_RepRfId := Self.RepRfId;
    try
      __Serializer.ReadUnicodeString('RepRfId', l_RepRfId);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepRfId']);
      end;
    end;
    Self.RepRfId := l_RepRfId;
    l_RepTemplateData := Self.int_RepTemplateData;
    try
      __Serializer.ReadBinary('RepTemplateData', l_RepTemplateData);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepTemplateData']);
      end;
    end;
    if Self.int_RepTemplateData <> l_RepTemplateData then begin
      FreeOrDisposeOf(Self.int_RepTemplateData);
    end;
    Self.RepTemplateData := l_RepTemplateData;
    l_RepUserIndex := Self.RepUserIndex;
    try
      __Serializer.ReadInteger('RepUserIndex', otSLong, l_RepUserIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'RepUserIndex']);
      end;
    end;
    Self.RepUserIndex := l_RepUserIndex;
  end;
end;

procedure roReportRec.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_RepAutoIndex: Integer;
  l_RepDesc: UnicodeString;
  l_RepName: UnicodeString;
  l_RepOptionsData: Binary;
  l_RepRfId: UnicodeString;
  l_RepTemplateData: Binary;
  l_RepUserIndex: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    __Serializer.ChangeClass(roReportRec);
    l_RepAutoIndex := Self.RepAutoIndex;
    __Serializer.WriteInteger('RepAutoIndex', otSLong, l_RepAutoIndex);
    l_RepRfId := Self.RepRfId;
    __Serializer.WriteUnicodeString('RepRfId', l_RepRfId);
    l_RepName := Self.RepName;
    __Serializer.WriteUnicodeString('RepName', l_RepName);
    l_RepDesc := Self.RepDesc;
    __Serializer.WriteUnicodeString('RepDesc', l_RepDesc);
    l_RepTemplateData := Self.int_RepTemplateData;
    __Serializer.WriteBinary('RepTemplateData', l_RepTemplateData);
    l_RepOptionsData := Self.int_RepOptionsData;
    __Serializer.WriteBinary('RepOptionsData', l_RepOptionsData);
    l_RepUserIndex := Self.RepUserIndex;
    __Serializer.WriteInteger('RepUserIndex', otSLong, l_RepUserIndex);
  end
  else begin
    l_RepAutoIndex := Self.RepAutoIndex;
    __Serializer.WriteInteger('RepAutoIndex', otSLong, l_RepAutoIndex);
    l_RepDesc := Self.RepDesc;
    __Serializer.WriteUnicodeString('RepDesc', l_RepDesc);
    l_RepName := Self.RepName;
    __Serializer.WriteUnicodeString('RepName', l_RepName);
    l_RepOptionsData := Self.int_RepOptionsData;
    __Serializer.WriteBinary('RepOptionsData', l_RepOptionsData);
    l_RepRfId := Self.RepRfId;
    __Serializer.WriteUnicodeString('RepRfId', l_RepRfId);
    l_RepTemplateData := Self.int_RepTemplateData;
    __Serializer.WriteBinary('RepTemplateData', l_RepTemplateData);
    l_RepUserIndex := Self.RepUserIndex;
    __Serializer.WriteInteger('RepUserIndex', otSLong, l_RepUserIndex);
  end;
end;

constructor roReportRecCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function roReportRecCollection.GetItems(aIndex: Integer): roReportRec;
begin
  result := roReportRec(inherited Items[aIndex]);
  exit;
end;

procedure roReportRecCollection.SetItems(aIndex: Integer; const Value: roReportRec);
var
  lvalue: roReportRec;
begin
  lvalue := roReportRec(inherited Items[aIndex]);
  lvalue.Assign(Value);
end;

constructor roReportRecCollection.Create;
begin
  inherited Create(roReportRec);
end;

function roReportRecCollection.Add: roReportRec;
begin
  result := roReportRec(inherited Add());
  exit;
end;

function roReportSessionFunctionalityRecord.GetFunctionList: roReportIndexList;
begin
  if not assigned(fFunctionList) then begin
    fFunctionList := roReportIndexList.Create();
  end;
  result := fFunctionList;
  exit;
end;

procedure roReportSessionFunctionalityRecord.FreeInternalProperties;
begin
  FreeOrDisposeOf(fFunctionList);
end;

procedure roReportSessionFunctionalityRecord.Assign(aSource: TPersistent);
var
  lSource: roReportSessionFunctionalityRecord;
begin
  inherited Assign(aSource);
  if aSource.InheritsFrom(roReportSessionFunctionalityRecord) then begin
    lSource := roReportSessionFunctionalityRecord(aSource);

    Self.SgIndex := lSource.SgIndex;
    Self.FullAccess := lSource.FullAccess;
    Self.IsAdmin := lSource.IsAdmin;
    if assigned(lSource.fFunctionList) then begin
      if assigned(Self.fFunctionList) then begin
        Self.FunctionList.Assign(lSource.fFunctionList);
      end
      else begin
        Self.fFunctionList := roReportIndexList(lSource.fFunctionList.Clone());
      end;
    end
    else begin
      FreeOrDisposeOf(Self.fFunctionList);
      Self.fFunctionList := nil;
    end;
  end;
end;

procedure roReportSessionFunctionalityRecord.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_FullAccess: Boolean;
  l_FunctionList: roReportIndexList;
  l_IsAdmin: Boolean;
  l_SgIndex: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    l_SgIndex := Self.SgIndex;
    try
      __Serializer.ReadInteger('SgIndex', otSLong, l_SgIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SgIndex']);
      end;
    end;
    Self.SgIndex := l_SgIndex;
    l_FullAccess := Self.FullAccess;
    try
      __Serializer.ReadEnumerated('FullAccess', System.TypeInfo(Boolean), l_FullAccess);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'FullAccess']);
      end;
    end;
    Self.FullAccess := l_FullAccess;
    l_IsAdmin := Self.IsAdmin;
    try
      __Serializer.ReadEnumerated('IsAdmin', System.TypeInfo(Boolean), l_IsAdmin);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'IsAdmin']);
      end;
    end;
    Self.IsAdmin := l_IsAdmin;
    l_FunctionList := Self.int_FunctionList;
    try
      __Serializer.ReadArray('FunctionList', roReportIndexList, l_FunctionList);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'FunctionList']);
      end;
    end;
    if Self.int_FunctionList <> l_FunctionList then begin
      FreeOrDisposeOf(Self.int_FunctionList);
    end;
    Self.FunctionList := l_FunctionList;
  end
  else begin
    l_FullAccess := Self.FullAccess;
    try
      __Serializer.ReadEnumerated('FullAccess', System.TypeInfo(Boolean), l_FullAccess);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'FullAccess']);
      end;
    end;
    Self.FullAccess := l_FullAccess;
    l_FunctionList := Self.int_FunctionList;
    try
      __Serializer.ReadArray('FunctionList', roReportIndexList, l_FunctionList);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'FunctionList']);
      end;
    end;
    if Self.int_FunctionList <> l_FunctionList then begin
      FreeOrDisposeOf(Self.int_FunctionList);
    end;
    Self.FunctionList := l_FunctionList;
    l_IsAdmin := Self.IsAdmin;
    try
      __Serializer.ReadEnumerated('IsAdmin', System.TypeInfo(Boolean), l_IsAdmin);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'IsAdmin']);
      end;
    end;
    Self.IsAdmin := l_IsAdmin;
    l_SgIndex := Self.SgIndex;
    try
      __Serializer.ReadInteger('SgIndex', otSLong, l_SgIndex);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'SgIndex']);
      end;
    end;
    Self.SgIndex := l_SgIndex;
  end;
end;

procedure roReportSessionFunctionalityRecord.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_FullAccess: Boolean;
  l_FunctionList: roReportIndexList;
  l_IsAdmin: Boolean;
  l_SgIndex: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    __Serializer.ChangeClass(roReportSessionFunctionalityRecord);
    l_SgIndex := Self.SgIndex;
    __Serializer.WriteInteger('SgIndex', otSLong, l_SgIndex);
    l_FullAccess := Self.FullAccess;
    __Serializer.WriteEnumerated('FullAccess', System.TypeInfo(Boolean), l_FullAccess);
    l_IsAdmin := Self.IsAdmin;
    __Serializer.WriteEnumerated('IsAdmin', System.TypeInfo(Boolean), l_IsAdmin);
    l_FunctionList := Self.int_FunctionList;
    __Serializer.WriteArray('FunctionList', l_FunctionList, roReportIndexList);
  end
  else begin
    l_FullAccess := Self.FullAccess;
    __Serializer.WriteEnumerated('FullAccess', System.TypeInfo(Boolean), l_FullAccess);
    l_FunctionList := Self.int_FunctionList;
    __Serializer.WriteArray('FunctionList', l_FunctionList, roReportIndexList);
    l_IsAdmin := Self.IsAdmin;
    __Serializer.WriteEnumerated('IsAdmin', System.TypeInfo(Boolean), l_IsAdmin);
    l_SgIndex := Self.SgIndex;
    __Serializer.WriteInteger('SgIndex', otSLong, l_SgIndex);
  end;
end;

constructor roReportSessionFunctionalityRecordCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function roReportSessionFunctionalityRecordCollection.GetItems(aIndex: Integer): roReportSessionFunctionalityRecord;
begin
  result := roReportSessionFunctionalityRecord(inherited Items[aIndex]);
  exit;
end;

procedure roReportSessionFunctionalityRecordCollection.SetItems(aIndex: Integer; const Value: roReportSessionFunctionalityRecord);
var
  lvalue: roReportSessionFunctionalityRecord;
begin
  lvalue := roReportSessionFunctionalityRecord(inherited Items[aIndex]);
  lvalue.Assign(Value);
end;

constructor roReportSessionFunctionalityRecordCollection.Create;
begin
  inherited Create(roReportSessionFunctionalityRecord);
end;

function roReportSessionFunctionalityRecordCollection.Add: roReportSessionFunctionalityRecord;
begin
  result := roReportSessionFunctionalityRecord(inherited Add());
  exit;
end;

{$IFDEF RO_GenericArray}
{$ENDIF}
{$IFNDEF RO_GenericArray}
{$ENDIF}
{$IFNDEF RO_GenericArray}
procedure roReportIndexList.Grow;
var
  lDelta: Integer;
  lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then begin
    lDelta := lCapacity div 4;
  end
  else begin
    if lCapacity > 8 then begin
      lDelta := 16;
    end
    else begin
      lDelta := 4;
    end;
  end;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function roReportIndexList.GetItems(aIndex: Integer): Integer;
begin
  if (aIndex < 0) or (aIndex >= fCount) then begin
    uROClasses.RaiseError(err_ArrayIndexOutOfBounds, [aIndex]);
  end;
  result := fItems[aIndex];
  exit;
end;

procedure roReportIndexList.SetItems(aIndex: Integer; Value: Integer);
begin
  if (aIndex < 0) or (aIndex >= fCount) then begin
    uROClasses.RaiseError(err_ArrayIndexOutOfBounds, [aIndex]);
  end;
  fItems[aIndex] := Value;
end;

function roReportIndexList.GetCount: Integer;
begin
  result := fCount;
  exit;
end;

procedure roReportIndexList.IntResize(anElementCount: Integer; AllocItems: Boolean);
begin
  if fCount = anElementCount then begin
    exit;
  end;
  System.SetLength(fItems, anElementCount);
  fCount := anElementCount;
end;

class function roReportIndexList.GetItemType: PTypeInfo;
begin
  result := System.TypeInfo(Integer);
  exit;
end;

class function roReportIndexList.GetItemSize: Integer;
begin
  result := sizeOf(Integer);
  exit;
end;

function roReportIndexList.GetItemRef(aIndex: Integer): Pointer;
begin
  if (aIndex < 0) or (aIndex >= fCount) then begin
    uROClasses.RaiseError(err_ArrayIndexOutOfBounds, [aIndex]);
  end;
  result := @fItems[aIndex];
  exit;
end;

procedure roReportIndexList.Clear;
begin
  System.SetLength(fItems, 0);
  fCount := 0;
end;

procedure roReportIndexList.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if aIndex >= fCount then begin
    uROClasses.RaiseError(err_InvalidIndex, [aIndex]);
  end;

  if aIndex < (fCount - 1) then begin
    for i := aIndex to fCount - 2 do
      fItems[i] := fItems[i + 1];
  end;
  System.SetLength(fItems, fCount - 1);
  fCount := fCount - 1;
end;

procedure roReportIndexList.Assign(aSource: TPersistent);
var
  lSource: roReportIndexList;
  i: Integer;
begin
  if aSource.InheritsFrom(roReportIndexList) then begin
    lSource := roReportIndexList(aSource);
    Self.Clear();

    Self.Resize(lSource.Count);
    for i := 0 to lSource.Count - 1 do
      Self.Items[i] := lSource.Items[i];
  end
  else begin
    inherited Assign(aSource);
  end;
end;

procedure roReportIndexList.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  lval: Integer;
  i: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  for i := 0 to fCount - 1 do begin
    __Serializer.ReadInteger(__Serializer.GetArrayElementName(GetItemType(), GetItemRef(i)), otSLong, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure roReportIndexList.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  i: Integer;
begin
  __Serializer := TROSerializer(aSerializer);
  __Serializer.ChangeClass(roReportIndexList);
  for i := 0 to fCount - 1 do begin
    __Serializer.WriteInteger(__Serializer.GetArrayElementName(GetItemType(), GetItemRef(i)), otSLong, fItems[i], i);
  end;
end;

function roReportIndexList.Add(Value: Integer): Integer;
var
  lResult: Integer;
begin
  lResult := fCount;
  if System.Length(fItems) = lResult then begin
    Self.Grow();
  end;
  fItems[lResult] := Value;
  fCount := fCount + 1;
  result := lResult;
  exit;
end;

function roReportIndexList.GetIndex(const aValue: Integer; const aStartFrom: Integer = 0): Integer;
begin
  result := Self.IndexOf(aValue, aStartFrom);
  exit;
end;

function roReportIndexList.GetIndex(const aPropertyName: String; const aPropertyValue: Variant; aStartFrom: Integer = 0; Options: TROSearchOptions = [soIgnoreCase]): Integer;
begin
  result := -1;
  exit;
end;

function roReportIndexList.IndexOf(const aValue: Integer; const aStartFrom: Integer = 0): Integer;
var
  lResult: Integer;
begin
  for lResult := aStartFrom to fCount - 1 do
    if fItems[lResult] = aValue then begin
      result := lResult;
      exit;
    end;
  result := -1;
  exit;
end;

function roReportIndexList.GetEnumerator: roReportIndexListEnumerator;
begin
  result := roReportIndexListEnumerator.Create(Self);
  exit;
end;

{$ENDIF}
{$IFNDEF RO_GenericArray}
function roReportIndexListEnumerator.GetCurrent: Integer;
begin
  result := fArray.Items[fCurrentIndex];
  exit;
end;

constructor roReportIndexListEnumerator.Create(anArray: roReportIndexList);
begin
  inherited Create();
  fArray := anArray;
  fCurrentIndex := -1;
end;

function roReportIndexListEnumerator.MoveNext: Boolean;
var
  lResult: Boolean;
begin
  lResult := fCurrentIndex < (fArray.Count - 1);
  if lResult then begin
    fCurrentIndex := fCurrentIndex + 1;
  end;
  result := lResult;
  exit;
end;

{$ENDIF}
class function CoReportService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService;
begin
  result := TReportService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReportService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService;
begin
  result := TReportService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoReportService.Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService;
begin
  result := TReportService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoReportService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService_Async;
begin
  result := TReportService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReportService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService_Async;
begin
  result := TReportService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoReportService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService_Async;
begin
  result := TReportService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoReportService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReportService_AsyncEx;
begin
  result := TReportService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReportService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IReportService_AsyncEx;
begin
  result := TReportService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoReportService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): IReportService_AsyncEx;
begin
  result := TReportService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TReportService_Proxy.__GetInterfaceName: String;
begin
  result := 'ReportService';
  exit;
end;

function TReportService_Proxy.GetVersion: UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetVersion');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.Login(const ID: UnicodeString; const Password: UnicodeString): roReportLoginResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportLoginResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Login');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    lMessage.Write('Password', System.TypeInfo(UnicodeString), Password, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.LoginSSO(const ID: UnicodeString): roReportLoginResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportLoginResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'LoginSSO');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.Logout(const SessionID: UnicodeString): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Logout');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.CheckSamlAuthentication(const UserCloudID: UnicodeString): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSamlAuthentication');
    lMessage.Write('UserCloudID', System.TypeInfo(UnicodeString), UserCloudID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.GetSamlIdpName(const UserCloudId: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetSamlIdpName');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.CheckCloudUserId(const UserCloudId: UnicodeString): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckCloudUserId');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.Echo(const AValue: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Echo');
    lMessage.Write('AValue', System.TypeInfo(UnicodeString), AValue, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.CheckSessionID(const SessionID: UnicodeString): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSessionID');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.GetReportFromListData(const SessionID: UnicodeString; out ReportFromListData: Binary): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ReportFromListData := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReportFromListData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
    lMessage.Read('ReportFromListData', System.TypeInfo(Binary), ReportFromListData, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.GetReport(const SessionId: UnicodeString; const RfId: UnicodeString; out ReportData: Binary): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ReportData := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('RfId', System.TypeInfo(UnicodeString), RfId, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
    lMessage.Read('ReportData', System.TypeInfo(Binary), ReportData, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    AppData := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManager');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
    lMessage.Read('AppData', System.TypeInfo(Binary), AppData, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManagerVersion');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
    lMessage.Read('Version', System.TypeInfo(UnicodeString), Version, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'SaveReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'DeleteReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RefreshSession(const SessionId: UnicodeString): roReportResult;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RefreshSession');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCompData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportDeptData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportUserData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportIntFolderData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportMessagesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitUpdatesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewCitationsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewInterviewsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewMessagesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewShedulesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsMemosData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsBusactsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntAutoIndex', System.TypeInfo(UnicodeString), IntAutoIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportDefinedFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitationData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntSchedIndex', System.TypeInfo(UnicodeString), IntSchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleDefinesFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitTextData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsAuthorizersData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsSchedulePendingData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRequestComments');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_Proxy.RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; out ResultReport: roReportResult): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    ResultReport := nil;
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
    lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'ReportService';
  exit;
end;

procedure TReportService_AsyncProxy.Invoke_GetVersion;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetVersion');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetVersion');
    __DispatchAsyncRequest('GetVersion', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_Login(const ID: UnicodeString; const Password: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Login');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Login');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    lMessage.Write('Password', System.TypeInfo(UnicodeString), Password, []);
    __DispatchAsyncRequest('Login', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_LoginSSO(const ID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('LoginSSO');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'LoginSSO');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    __DispatchAsyncRequest('LoginSSO', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_Logout(const SessionID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Logout');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Logout');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    __DispatchAsyncRequest('Logout', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_CheckSamlAuthentication(const UserCloudID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('CheckSamlAuthentication');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSamlAuthentication');
    lMessage.Write('UserCloudID', System.TypeInfo(UnicodeString), UserCloudID, []);
    __DispatchAsyncRequest('CheckSamlAuthentication', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_GetSamlIdpName(const UserCloudId: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetSamlIdpName');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetSamlIdpName');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    __DispatchAsyncRequest('GetSamlIdpName', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_CheckCloudUserId(const UserCloudId: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('CheckCloudUserId');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckCloudUserId');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    __DispatchAsyncRequest('CheckCloudUserId', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_Echo(const AValue: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Echo');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Echo');
    lMessage.Write('AValue', System.TypeInfo(UnicodeString), AValue, []);
    __DispatchAsyncRequest('Echo', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_CheckSessionID(const SessionID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('CheckSessionID');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSessionID');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    __DispatchAsyncRequest('CheckSessionID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_GetReportFromListData(const SessionID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetReportFromListData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReportFromListData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    __DispatchAsyncRequest('GetReportFromListData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_GetReport(const SessionId: UnicodeString; const RfId: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetReport');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('RfId', System.TypeInfo(UnicodeString), RfId, []);
    __DispatchAsyncRequest('GetReport', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_GetNewInstallationVCloudReportManager;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetNewInstallationVCloudReportManager');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManager');
    __DispatchAsyncRequest('GetNewInstallationVCloudReportManager', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_GetNewInstallationVCloudReportManagerVersion;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetNewInstallationVCloudReportManagerVersion');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManagerVersion');
    __DispatchAsyncRequest('GetNewInstallationVCloudReportManagerVersion', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_SaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('SaveReport');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'SaveReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    __DispatchAsyncRequest('SaveReport', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_DeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('DeleteReport');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'DeleteReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    __DispatchAsyncRequest('DeleteReport', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RefreshSession(const SessionId: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RefreshSession');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RefreshSession');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    __DispatchAsyncRequest('RefreshSession', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportCompData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCompData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportCompData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetSubReportDeptData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportDeptData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetSubReportDeptData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetSubReportUserData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportUserData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetSubReportUserData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportIntFolderData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportIntFolderData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportIntFolderData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportMessagesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportMessagesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportMessagesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportCitUpdatesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitUpdatesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportCitUpdatesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportReviewCitationsFlagData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewCitationsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportReviewCitationsFlagData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportReviewInterviewsFlagData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewInterviewsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportReviewInterviewsFlagData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportReviewMessagesFlagData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewMessagesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportReviewMessagesFlagData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportReviewShedulesFlagData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewShedulesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportReviewShedulesFlagData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportResearchCitationsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportResearchCitationsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportResearchCitationsMemosData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsMemosData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportResearchCitationsMemosData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportResearchCitationsBusactsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsBusactsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportResearchCitationsBusactsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportResearchCitationsSchedulesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportResearchCitationsSchedulesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportInterviewsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportInterviewsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportCitationsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntAutoIndex', System.TypeInfo(UnicodeString), IntAutoIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportCitationsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportDefinedFieldsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportDefinedFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportDefinedFieldsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleSchedulesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleSchedulesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleCitationData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitationData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleCitationData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleInterviewsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntSchedIndex', System.TypeInfo(UnicodeString), IntSchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleInterviewsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleDefinesFieldsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleDefinesFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleDefinesFieldsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleCountriesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleCountriesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleCitTextData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitTextData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleCitTextData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleRelatedItemsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleRelatedItemsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsAuthorizersData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsAuthorizersData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsAuthorizersData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsSchedulePendingData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsSchedulePendingData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsSchedulePendingData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsRequestComments');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRequestComments');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsRequestComments', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsScheduleCountriesData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsScheduleCountriesData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsScheduleCitationsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsScheduleCitationsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsScheduleData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsScheduleData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsUDFsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsUDFsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportChangeRequestsRelatedItemsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    __DispatchAsyncRequest('RDA_GetReportChangeRequestsRelatedItemsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportInterviewUDFsData(const SessionID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportInterviewUDFsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    __DispatchAsyncRequest('RDA_GetReportInterviewUDFsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TReportService_AsyncProxy.Invoke_RDA_GetReportScheduleUDFsData(const SessionID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RDA_GetReportScheduleUDFsData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    __DispatchAsyncRequest('RDA_GetReportScheduleUDFsData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TReportService_AsyncProxy.Retrieve_GetVersion: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetVersion');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_Login: roReportLoginResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportLoginResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('Login');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_LoginSSO: roReportLoginResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportLoginResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('LoginSSO');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_Logout: roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('Logout');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_CheckSamlAuthentication: Boolean;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('CheckSamlAuthentication');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_GetSamlIdpName: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetSamlIdpName');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_CheckCloudUserId: Boolean;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('CheckCloudUserId');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_Echo: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Echo');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_CheckSessionID: Boolean;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('CheckSessionID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_GetReportFromListData(out ReportFromListData: Binary): roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ReportFromListData := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('GetReportFromListData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
        lMessage.Read('ReportFromListData', System.TypeInfo(Binary), ReportFromListData, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_GetReport(out ReportData: Binary): roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ReportData := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('GetReport');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
        lMessage.Read('ReportData', System.TypeInfo(Binary), ReportData, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_GetNewInstallationVCloudReportManager(out AppData: Binary): roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    AppData := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('GetNewInstallationVCloudReportManager');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
        lMessage.Read('AppData', System.TypeInfo(Binary), AppData, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_GetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString): roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('GetNewInstallationVCloudReportManagerVersion');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
        lMessage.Read('Version', System.TypeInfo(UnicodeString), Version, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_SaveReport: roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('SaveReport');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_DeleteReport: roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('DeleteReport');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RefreshSession: roReportResult;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: roReportResult;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('RefreshSession');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(roReportResult), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportCompData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportCompData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetSubReportDeptData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetSubReportDeptData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetSubReportUserData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetSubReportUserData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportIntFolderData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportIntFolderData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportMessagesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportMessagesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportCitUpdatesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportCitUpdatesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportReviewCitationsFlagData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportReviewInterviewsFlagData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportReviewMessagesFlagData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportReviewShedulesFlagData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportResearchCitationsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportResearchCitationsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportResearchCitationsMemosData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportResearchCitationsBusactsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportResearchCitationsSchedulesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportInterviewsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportInterviewsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportCitationsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportCitationsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportDefinedFieldsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportDefinedFieldsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleSchedulesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleCitationData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleCitationData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleInterviewsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleDefinesFieldsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleCountriesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleCountriesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleCitTextData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleCitTextData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleRelatedItemsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsAuthorizersData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsSchedulePendingData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsRequestComments');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsScheduleCountriesData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsScheduleCitationsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsScheduleData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsUDFsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportChangeRequestsRelatedItemsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportInterviewUDFsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportInterviewUDFsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxy.Retrieve_RDA_GetReportScheduleUDFsData(out ResultReport: roReportResult): Binary;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Binary;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    ResultReport := nil;
    lResult := nil;
    __response := __RetrieveAsyncResponse('RDA_GetReportScheduleUDFsData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Binary), lResult, []);
        lMessage.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'ReportService';
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetVersion');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginLogin(const ID: UnicodeString; const Password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Login');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    lMessage.Write('Password', System.TypeInfo(UnicodeString), Password, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginLoginSSO(const ID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'LoginSSO');
    lMessage.Write('ID', System.TypeInfo(UnicodeString), ID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginLogout(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Logout');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginCheckSamlAuthentication(const UserCloudID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSamlAuthentication');
    lMessage.Write('UserCloudID', System.TypeInfo(UnicodeString), UserCloudID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetSamlIdpName(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetSamlIdpName');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginCheckCloudUserId(const UserCloudId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckCloudUserId');
    lMessage.Write('UserCloudId', System.TypeInfo(UnicodeString), UserCloudId, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginEcho(const AValue: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'Echo');
    lMessage.Write('AValue', System.TypeInfo(UnicodeString), AValue, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginCheckSessionID(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'CheckSessionID');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetReportFromListData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReportFromListData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetReport(const SessionId: UnicodeString; const RfId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('RfId', System.TypeInfo(UnicodeString), RfId, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetNewInstallationVCloudReportManager(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManager');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginGetNewInstallationVCloudReportManagerVersion(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'GetNewInstallationVCloudReportManagerVersion');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginSaveReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'SaveReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginDeleteReport(const SessionId: UnicodeString; const ReportRecord: roReportRec; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'DeleteReport');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lMessage.Write('ReportRecord', System.TypeInfo(roReportRec), ReportRecord, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRefreshSession(const SessionId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RefreshSession');
    lMessage.Write('SessionId', System.TypeInfo(UnicodeString), SessionId, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportCompData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCompData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetSubReportDeptData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportDeptData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetSubReportUserData(const SessionID: UnicodeString; const CompId: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetSubReportUserData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CompId', System.TypeInfo(UnicodeString), CompId, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportIntFolderData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                     const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportIntFolderData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportMessagesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                    const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportMessagesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportCitUpdatesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                      const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitUpdatesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportReviewCitationsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                               const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewCitationsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportReviewInterviewsFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                                const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewInterviewsFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportReviewMessagesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                              const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewMessagesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportReviewShedulesFlagData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                              const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportReviewShedulesFlagData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportResearchCitationsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                             const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportResearchCitationsMemosData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                  const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsMemosData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportResearchCitationsBusactsData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                    const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsBusactsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportResearchCitationsSchedulesData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                      const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportResearchCitationsSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportInterviewsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                      const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportCitationsData(const SessionID: UnicodeString; const IntAutoIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                     const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntAutoIndex', System.TypeInfo(UnicodeString), IntAutoIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportDefinedFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                         const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportDefinedFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleSchedulesData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                             const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleSchedulesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleCitationData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                            const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitationData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleInterviewsData(const SessionID: UnicodeString; const IntSchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                              const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleInterviewsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('IntSchedIndex', System.TypeInfo(UnicodeString), IntSchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleDefinesFieldsData(const SessionID: UnicodeString; const RecordIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                 const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleDefinesFieldsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RecordIndex', System.TypeInfo(UnicodeString), RecordIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleCountriesData(const SessionID: UnicodeString; const SchedIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                             const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(UnicodeString), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleCitTextData(const SessionID: UnicodeString; const CitIndex: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                           const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleCitTextData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CitIndex', System.TypeInfo(UnicodeString), CitIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsData(const SessionID: UnicodeString; const TopCount: Integer; const MasterIndexesStrList: UnicodeString; const SortOrder: UnicodeString;
                                                                          const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('TopCount', System.TypeInfo(Integer), TopCount, []);
    lMessage.Write('MasterIndexesStrList', System.TypeInfo(UnicodeString), MasterIndexesStrList, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsAuthorizersData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                     const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsAuthorizersData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsSchedulePendingData(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                         const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsSchedulePendingData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsRequestComments(const SessionID: UnicodeString; const CRIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                     const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRequestComments');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsScheduleCountriesData(const SessionID: UnicodeString; const CRIndex: Integer; const SchedIndex: Integer; const SortOrder: UnicodeString;
                                                                                           const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCountriesData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('CRIndex', System.TypeInfo(Integer), CRIndex, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsScheduleCitationsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                           const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleCitationsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsScheduleData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                  const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsScheduleData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsUDFsData(const SessionID: UnicodeString; const SchedIndex: Integer; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                              const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('SchedIndex', System.TypeInfo(Integer), SchedIndex, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportChangeRequestsRelatedItemsData(const SessionID: UnicodeString; const RelatedSchedIndexPar: UnicodeString; const SortOrder: UnicodeString; const aCallback: TROAsyncCallback;
                                                                                      const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportChangeRequestsRelatedItemsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lMessage.Write('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), RelatedSchedIndexPar, []);
    lMessage.Write('SortOrder', System.TypeInfo(UnicodeString), SortOrder, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportInterviewUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportInterviewUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.BeginRDA_GetReportScheduleUDFsData(const SessionID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'VReportServiceLibrary', __InterfaceName, 'RDA_GetReportScheduleUDFsData');
    lMessage.Write('SessionID', System.TypeInfo(UnicodeString), SessionID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetVersion(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndLogin(const aRequest: IROAsyncRequest): roReportLoginResult;
var
  lResult: roReportLoginResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndLoginSSO(const aRequest: IROAsyncRequest): roReportLoginResult;
var
  lResult: roReportLoginResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportLoginResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndLogout(const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndCheckSamlAuthentication(const aRequest: IROAsyncRequest): Boolean;
var
  lResult: Boolean;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Boolean), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetSamlIdpName(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndCheckCloudUserId(const aRequest: IROAsyncRequest): Boolean;
var
  lResult: Boolean;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Boolean), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndEcho(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndCheckSessionID(const aRequest: IROAsyncRequest): Boolean;
var
  lResult: Boolean;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Boolean), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetReportFromListData(out ReportFromListData: Binary; const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  ReportFromListData := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  aRequest.Message.Read('ReportFromListData', System.TypeInfo(Binary), ReportFromListData, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetReport(out ReportData: Binary; const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  ReportData := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  aRequest.Message.Read('ReportData', System.TypeInfo(Binary), ReportData, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetNewInstallationVCloudReportManager(out AppData: Binary; const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  AppData := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  aRequest.Message.Read('AppData', System.TypeInfo(Binary), AppData, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndGetNewInstallationVCloudReportManagerVersion(out Version: UnicodeString; const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  aRequest.Message.Read('Version', System.TypeInfo(UnicodeString), Version, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndSaveReport(const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndDeleteReport(const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRefreshSession(const aRequest: IROAsyncRequest): roReportResult;
var
  lResult: roReportResult;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(roReportResult), lResult, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportCompData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetSubReportDeptData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetSubReportUserData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportIntFolderData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportMessagesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportCitUpdatesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportReviewCitationsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportReviewInterviewsFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportReviewMessagesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportReviewShedulesFlagData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportResearchCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportResearchCitationsMemosData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportResearchCitationsBusactsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportResearchCitationsSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportDefinedFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleSchedulesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleCitationData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleInterviewsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleDefinesFieldsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleCitTextData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsAuthorizersData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsSchedulePendingData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsRequestComments(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsScheduleCountriesData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsScheduleCitationsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsScheduleData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportChangeRequestsRelatedItemsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportInterviewUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

function TReportService_AsyncProxyEx.EndRDA_GetReportScheduleUDFsData(out ResultReport: roReportResult; const aRequest: IROAsyncRequest): Binary;
var
  lResult: Binary;
begin
  ResultReport := nil;
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Binary), lResult, []);
  aRequest.Message.Read('ResultReport', System.TypeInfo(roReportResult), ResultReport, []);
  result := lResult;
  exit;
end;

initialization
  RegisterROClass(roReportResult, DefaultNamespace);
  RegisterROClass(roReportLoginResult, DefaultNamespace);
  RegisterROClass(roReportRec, DefaultNamespace);
  RegisterROClass(roReportSessionFunctionalityRecord, DefaultNamespace);
  RegisterROClass(roReportIndexList, DefaultNamespace);
  RegisterProxyClass(IReportService_IID, TReportService_Proxy);
finalization
  UnregisterROClass(roReportResult, DefaultNamespace);
  UnregisterROClass(roReportLoginResult, DefaultNamespace);
  UnregisterROClass(roReportRec, DefaultNamespace);
  UnregisterROClass(roReportSessionFunctionalityRecord, DefaultNamespace);
  UnregisterROClass(roReportIndexList, DefaultNamespace);
  UnregisterProxyClass(IReportService_IID);
end.

