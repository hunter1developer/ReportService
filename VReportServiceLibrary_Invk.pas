unit VReportServiceLibrary_Invk;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  uROEncoding,
  uROXMLIntf,
  uROServer,
  uROServerIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  VReportServiceLibrary_Intf;

type
  { Forward declarations }
  TReportService_Invoker = class;

  TReportService_Invoker = class(TROInvoker)
  public
    constructor Create; override;
  published
    procedure Invoke_GetVersion(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_Login(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_LoginSSO(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_Logout(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_CheckSamlAuthentication(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetSamlIdpName(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_CheckCloudUserId(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_Echo(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_CheckSessionID(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetReportFromListData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetNewInstallationVCloudReportManager(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetNewInstallationVCloudReportManagerVersion(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_SaveReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_DeleteReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RefreshSession(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportCompData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetSubReportDeptData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetSubReportUserData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportIntFolderData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportMessagesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportCitUpdatesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportReviewCitationsFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportReviewInterviewsFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportReviewMessagesFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportReviewShedulesFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportResearchCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportResearchCitationsMemosData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportResearchCitationsBusactsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportResearchCitationsSchedulesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportInterviewsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportDefinedFieldsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleSchedulesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleCitationData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleInterviewsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleDefinesFieldsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleCountriesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleCitTextData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleRelatedItemsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsAuthorizersData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsSchedulePendingData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsRequestComments(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCountriesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsScheduleData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportChangeRequestsRelatedItemsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportInterviewUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_RDA_GetReportScheduleUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
  end;

implementation

uses
  uROSystem,
  uROEventRepository,
  uRORes,
  uROClient;

constructor TReportService_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

procedure TReportService_Invoker.Invoke_GetVersion(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  lResult: UnicodeString;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetVersion: __Instance does not support ReportService interface');
    end;

    lResult := __lintf.GetVersion();

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetVersionResponse');
    __Message.Write('Result', System.TypeInfo(UnicodeString), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_Login(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_ID: UnicodeString;
  l_Password: UnicodeString;
  lResult: VReportServiceLibrary_Intf.roReportLoginResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_Login: __Instance does not support ReportService interface');
    end;

    __Message.Read('ID', System.TypeInfo(UnicodeString), l_ID, []);
    __Message.Read('Password', System.TypeInfo(UnicodeString), l_Password, []);

    lResult := __lintf.Login(l_ID, l_Password);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'LoginResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportLoginResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_LoginSSO(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_ID: UnicodeString;
  lResult: VReportServiceLibrary_Intf.roReportLoginResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_LoginSSO: __Instance does not support ReportService interface');
    end;

    __Message.Read('ID', System.TypeInfo(UnicodeString), l_ID, []);

    lResult := __lintf.LoginSSO(l_ID);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'LoginSSOResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportLoginResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_Logout(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_Logout: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);

    lResult := __lintf.Logout(l_SessionID);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'LogoutResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_CheckSamlAuthentication(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_UserCloudID: UnicodeString;
  lResult: Boolean;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_CheckSamlAuthentication: __Instance does not support ReportService interface');
    end;

    __Message.Read('UserCloudID', System.TypeInfo(UnicodeString), l_UserCloudID, []);

    lResult := __lintf.CheckSamlAuthentication(l_UserCloudID);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'CheckSamlAuthenticationResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_GetSamlIdpName(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_UserCloudId: UnicodeString;
  lResult: UnicodeString;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetSamlIdpName: __Instance does not support ReportService interface');
    end;

    __Message.Read('UserCloudId', System.TypeInfo(UnicodeString), l_UserCloudId, []);

    lResult := __lintf.GetSamlIdpName(l_UserCloudId);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetSamlIdpNameResponse');
    __Message.Write('Result', System.TypeInfo(UnicodeString), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_CheckCloudUserId(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_UserCloudId: UnicodeString;
  lResult: Boolean;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_CheckCloudUserId: __Instance does not support ReportService interface');
    end;

    __Message.Read('UserCloudId', System.TypeInfo(UnicodeString), l_UserCloudId, []);

    lResult := __lintf.CheckCloudUserId(l_UserCloudId);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'CheckCloudUserIdResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_Echo(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_AValue: UnicodeString;
  lResult: UnicodeString;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_Echo: __Instance does not support ReportService interface');
    end;

    __Message.Read('AValue', System.TypeInfo(UnicodeString), l_AValue, []);

    lResult := __lintf.Echo(l_AValue);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'EchoResponse');
    __Message.Write('Result', System.TypeInfo(UnicodeString), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_CheckSessionID(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  lResult: Boolean;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_CheckSessionID: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);

    lResult := __lintf.CheckSessionID(l_SessionID);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'CheckSessionIDResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TReportService_Invoker.Invoke_GetReportFromListData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_ReportFromListData: Binary;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ReportFromListData := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetReportFromListData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);

    lResult := __lintf.GetReportFromListData(l_SessionID, l_ReportFromListData);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetReportFromListDataResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Write('ReportFromListData', System.TypeInfo(Binary), l_ReportFromListData, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ReportFromListData);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_GetReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionId: UnicodeString;
  l_RfId: UnicodeString;
  l_ReportData: Binary;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ReportData := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetReport: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionId', System.TypeInfo(UnicodeString), l_SessionId, []);
    __Message.Read('RfId', System.TypeInfo(UnicodeString), l_RfId, []);

    lResult := __lintf.GetReport(l_SessionId, l_RfId, l_ReportData);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetReportResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Write('ReportData', System.TypeInfo(Binary), l_ReportData, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ReportData);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_GetNewInstallationVCloudReportManager(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_AppData: Binary;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_AppData := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetNewInstallationVCloudReportManager: __Instance does not support ReportService interface');
    end;


    lResult := __lintf.GetNewInstallationVCloudReportManager(l_AppData);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetNewInstallationVCloudReportManagerResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Write('AppData', System.TypeInfo(Binary), l_AppData, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_AppData);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_GetNewInstallationVCloudReportManagerVersion(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_Version: UnicodeString;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_GetNewInstallationVCloudReportManagerVersion: __Instance does not support ReportService interface');
    end;


    lResult := __lintf.GetNewInstallationVCloudReportManagerVersion(l_Version);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'GetNewInstallationVCloudReportManagerVersionResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Write('Version', System.TypeInfo(UnicodeString), l_Version, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_SaveReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionId: UnicodeString;
  l_ReportRecord: VReportServiceLibrary_Intf.roReportRec;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ReportRecord := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_SaveReport: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionId', System.TypeInfo(UnicodeString), l_SessionId, []);
    __Message.Read('ReportRecord', System.TypeInfo(VReportServiceLibrary_Intf.roReportRec), l_ReportRecord, []);

    lResult := __lintf.SaveReport(l_SessionId, l_ReportRecord);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'SaveReportResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ReportRecord);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_DeleteReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionId: UnicodeString;
  l_ReportRecord: VReportServiceLibrary_Intf.roReportRec;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ReportRecord := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_DeleteReport: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionId', System.TypeInfo(UnicodeString), l_SessionId, []);
    __Message.Read('ReportRecord', System.TypeInfo(VReportServiceLibrary_Intf.roReportRec), l_ReportRecord, []);

    lResult := __lintf.DeleteReport(l_SessionId, l_ReportRecord);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'DeleteReportResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ReportRecord);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RefreshSession(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionId: UnicodeString;
  lResult: VReportServiceLibrary_Intf.roReportResult;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RefreshSession: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionId', System.TypeInfo(UnicodeString), l_SessionId, []);

    lResult := __lintf.RefreshSession(l_SessionId);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RefreshSessionResponse');
    __Message.Write('Result', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportCompData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportCompData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportCompData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportCompDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetSubReportDeptData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CompId: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetSubReportDeptData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CompId', System.TypeInfo(UnicodeString), l_CompId, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetSubReportDeptData(l_SessionID, l_CompId, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetSubReportDeptDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetSubReportUserData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CompId: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetSubReportUserData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CompId', System.TypeInfo(UnicodeString), l_CompId, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetSubReportUserData(l_SessionID, l_CompId, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetSubReportUserDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportIntFolderData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportIntFolderData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportIntFolderData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportIntFolderDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportMessagesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportMessagesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportMessagesData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportMessagesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportCitUpdatesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportCitUpdatesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportCitUpdatesData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportCitUpdatesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportReviewCitationsFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportReviewCitationsFlagData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportReviewCitationsFlagData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportReviewCitationsFlagDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportReviewInterviewsFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportReviewInterviewsFlagData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportReviewInterviewsFlagData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportReviewInterviewsFlagDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportReviewMessagesFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportReviewMessagesFlagData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportReviewMessagesFlagData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportReviewMessagesFlagDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportReviewShedulesFlagData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportReviewShedulesFlagData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportReviewShedulesFlagData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportReviewShedulesFlagDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportResearchCitationsData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportResearchCitationsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsMemosData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CitIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsMemosData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CitIndex', System.TypeInfo(UnicodeString), l_CitIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportResearchCitationsMemosData(l_SessionID, l_CitIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportResearchCitationsMemosDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsBusactsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CitIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsBusactsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CitIndex', System.TypeInfo(UnicodeString), l_CitIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportResearchCitationsBusactsData(l_SessionID, l_CitIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportResearchCitationsBusactsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsSchedulesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CitIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportResearchCitationsSchedulesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CitIndex', System.TypeInfo(UnicodeString), l_CitIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportResearchCitationsSchedulesData(l_SessionID, l_CitIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportResearchCitationsSchedulesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportInterviewsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportInterviewsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportInterviewsData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportInterviewsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_IntAutoIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportCitationsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('IntAutoIndex', System.TypeInfo(UnicodeString), l_IntAutoIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportCitationsData(l_SessionID, l_IntAutoIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportCitationsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportDefinedFieldsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_RecordIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportDefinedFieldsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('RecordIndex', System.TypeInfo(UnicodeString), l_RecordIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportDefinedFieldsData(l_SessionID, l_RecordIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportDefinedFieldsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleSchedulesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleSchedulesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleSchedulesData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleSchedulesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleCitationData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_SchedIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleCitationData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('SchedIndex', System.TypeInfo(UnicodeString), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleCitationData(l_SessionID, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleCitationDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleInterviewsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_IntSchedIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleInterviewsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('IntSchedIndex', System.TypeInfo(UnicodeString), l_IntSchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleInterviewsData(l_SessionID, l_IntSchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleInterviewsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleDefinesFieldsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_RecordIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleDefinesFieldsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('RecordIndex', System.TypeInfo(UnicodeString), l_RecordIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleDefinesFieldsData(l_SessionID, l_RecordIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleDefinesFieldsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleCountriesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_SchedIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleCountriesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('SchedIndex', System.TypeInfo(UnicodeString), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleCountriesData(l_SessionID, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleCountriesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleCitTextData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CitIndex: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleCitTextData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CitIndex', System.TypeInfo(UnicodeString), l_CitIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleCitTextData(l_SessionID, l_CitIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleCitTextDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleRelatedItemsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_RelatedSchedIndexPar: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleRelatedItemsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), l_RelatedSchedIndexPar, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportScheduleRelatedItemsData(l_SessionID, l_RelatedSchedIndexPar, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleRelatedItemsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_TopCount: Integer;
  l_MasterIndexesStrList: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('TopCount', System.TypeInfo(Integer), l_TopCount, []);
    __Message.Read('MasterIndexesStrList', System.TypeInfo(UnicodeString), l_MasterIndexesStrList, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsData(l_SessionID, l_TopCount, l_MasterIndexesStrList, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsAuthorizersData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CRIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsAuthorizersData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CRIndex', System.TypeInfo(Integer), l_CRIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsAuthorizersData(l_SessionID, l_CRIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsAuthorizersDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsSchedulePendingData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CRIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsSchedulePendingData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CRIndex', System.TypeInfo(Integer), l_CRIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsSchedulePendingData(l_SessionID, l_CRIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsSchedulePendingDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsRequestComments(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CRIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsRequestComments: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CRIndex', System.TypeInfo(Integer), l_CRIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsRequestComments(l_SessionID, l_CRIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsRequestCommentsResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleCountriesData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_CRIndex: Integer;
  l_SchedIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleCountriesData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('CRIndex', System.TypeInfo(Integer), l_CRIndex, []);
    __Message.Read('SchedIndex', System.TypeInfo(Integer), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsScheduleCountriesData(l_SessionID, l_CRIndex, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsScheduleCountriesDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleCitationsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_SchedIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleCitationsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('SchedIndex', System.TypeInfo(Integer), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsScheduleCitationsData(l_SessionID, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsScheduleCitationsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_SchedIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsScheduleData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('SchedIndex', System.TypeInfo(Integer), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsScheduleData(l_SessionID, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsScheduleDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_SchedIndex: Integer;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsUDFsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('SchedIndex', System.TypeInfo(Integer), l_SchedIndex, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsUDFsData(l_SessionID, l_SchedIndex, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsUDFsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsRelatedItemsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_RelatedSchedIndexPar: UnicodeString;
  l_SortOrder: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportChangeRequestsRelatedItemsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);
    __Message.Read('RelatedSchedIndexPar', System.TypeInfo(UnicodeString), l_RelatedSchedIndexPar, []);
    __Message.Read('SortOrder', System.TypeInfo(UnicodeString), l_SortOrder, []);

    lResult := __lintf.RDA_GetReportChangeRequestsRelatedItemsData(l_SessionID, l_RelatedSchedIndexPar, l_SortOrder, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportChangeRequestsRelatedItemsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportInterviewUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportInterviewUDFsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);

    lResult := __lintf.RDA_GetReportInterviewUDFsData(l_SessionID, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportInterviewUDFsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

procedure TReportService_Invoker.Invoke_RDA_GetReportScheduleUDFsData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_SessionID: UnicodeString;
  l_ResultReport: VReportServiceLibrary_Intf.roReportResult;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: VReportServiceLibrary_Intf.IReportService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ResultReport := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IReportService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TReportService_Invoker.Invoke_RDA_GetReportScheduleUDFsData: __Instance does not support ReportService interface');
    end;

    __Message.Read('SessionID', System.TypeInfo(UnicodeString), l_SessionID, []);

    lResult := __lintf.RDA_GetReportScheduleUDFsData(l_SessionID, l_ResultReport);

    __Message.InitializeResponseMessage(__Transport, 'VReportServiceLibrary', __Message.InterfaceName, 'RDA_GetReportScheduleUDFsDataResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Write('ResultReport', System.TypeInfo(VReportServiceLibrary_Intf.roReportResult), l_ResultReport, []);
    __Message.Finalize();
    __Message.UnsetAttributes2_Transport(__Transport);
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ResultReport);
      __lObjectDisposer.Add(lResult);
    finally
      FreeOrDisposeOf(__lObjectDisposer);
    end;
  end;
end;

initialization
finalization
end.

